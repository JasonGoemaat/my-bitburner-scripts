{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":57,\"max\":57},\"skills\":{\"hacking\":26,\"strength\":1500,\"defense\":476,\"dexterity\":86,\"agility\":99,\"charisma\":6,\"intelligence\":0},\"exp\":{\"hacking\":0,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":5.5948200445279,\"hacking_speed\":4.267832042457854,\"hacking_money\":47.434831186584496,\"hacking_grow\":7.711715628342898,\"hacking\":26.900634680738392,\"strength\":1496.7866832410057,\"defense\":475.3622248300968,\"dexterity\":86.39239257702752,\"agility\":99.28962313917134,\"charisma\":6.976126984524052,\"hacking_exp\":18.00290533114019,\"strength_exp\":4.030302090328683,\"defense_exp\":4.4333322993615525,\"dexterity_exp\":5.6081653586923625,\"agility_exp\":4.030302090328683,\"charisma_exp\":7.0475838407891445,\"company_rep\":22.821659629367023,\"faction_rep\":3.1780230162288703,\"crime_money\":3.579531280093955,\"crime_success\":1.915468243528538,\"hacknet_node_money\":2.963759205793667,\"hacknet_node_purchase_cost\":0.6343306807966834,\"hacknet_node_ram_cost\":0.8291904324139651,\"hacknet_node_core_cost\":0.8291904324139651,\"hacknet_node_level_cost\":0.7048118675518702,\"work_money\":4.685888716036967,\"bladeburner_max_stamina\":1.2127500000000002,\"bladeburner_stamina_gain\":1.1699818200000003,\"bladeburner_analysis\":1.5274875,\"bladeburner_success_chance\":1.9160597560708867},\"money\":800000,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{},\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Church of the Machine God\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"TITN-41 Gene-Modification Injection\"},{\"level\":1,\"name\":\"Enhanced Social Interaction Implant\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Graphene Bone Lacings\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"Graphene Bionic Spine Upgrade\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"Graphene Bionic Legs Upgrade\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neuronal Densification\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface Optimization Submodule\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface NeuroNet Injector\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"HyperSight Corneal Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"QLink\"},{\"level\":1,\"name\":\"The Red Pill\"},{\"level\":1,\"name\":\"SPTN-97 Gene Modification\"},{\"level\":1,\"name\":\"ECorp HVMind Implant\"},{\"level\":1,\"name\":\"CordiARC Fusion Reactor\"},{\"level\":1,\"name\":\"SmartJaw\"},{\"level\":1,\"name\":\"Neotra\"},{\"level\":1,\"name\":\"Xanipher\"},{\"level\":1,\"name\":\"nextSENS Gene Modification\"},{\"level\":1,\"name\":\"OmniTek InfoLoad\"},{\"level\":1,\"name\":\"Photosynthetic Cells\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Unstable Circadian Modulator\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"Graphene BrachiBlades Upgrade\"},{\"level\":1,\"name\":\"Graphene Bionic Arms Upgrade\"},{\"level\":1,\"name\":\"BrachiBlades\"},{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Hydroflame Left Arm\"},{\"level\":1,\"name\":\"nickofolas Congruity Implant\"},{\"level\":1,\"name\":\"EsperTech Bladeburner Eyewear\"},{\"level\":1,\"name\":\"EMS-4 Recombination\"},{\"level\":1,\"name\":\"ORION-MKIV Shoulder\"},{\"level\":1,\"name\":\"Hyperion Plasma Cannon V1\"},{\"level\":1,\"name\":\"Hyperion Plasma Cannon V2\"},{\"level\":1,\"name\":\"GOLEM Serum\"},{\"level\":1,\"name\":\"Vangelis Virus\"},{\"level\":1,\"name\":\"Vangelis Virus 3.0\"},{\"level\":1,\"name\":\"I.N.T.E.R.L.I.N.K.E.D\"},{\"level\":1,\"name\":\"Blade's Runners\"},{\"level\":1,\"name\":\"BLADE-51b Tesla Armor\"},{\"level\":1,\"name\":\"BLADE-51b Tesla Armor: Power Cells Upgrade\"},{\"level\":1,\"name\":\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\"},{\"level\":1,\"name\":\"BLADE-51b Tesla Armor: Unibeam Upgrade\"},{\"level\":1,\"name\":\"BLADE-51b Tesla Armor: Omnibeam Upgrade\"},{\"level\":1,\"name\":\"BLADE-51b Tesla Armor: IPU Upgrade\"},{\"level\":1,\"name\":\"The Blade's Simulacrum\"},{\"level\":1,\"name\":\"Stanek's Gift - Genesis\"},{\"level\":1,\"name\":\"Stanek's Gift - Awakening\"},{\"level\":1,\"name\":\"Stanek's Gift - Serenity\"},{\"level\":1,\"name\":\"SoA - Might of Ares\"},{\"level\":1,\"name\":\"SoA - Wisdom of Athena\"},{\"level\":1,\"name\":\"SoA - Trickery of Hermes\"},{\"level\":1,\"name\":\"SoA - Beauty of Aphrodite\"},{\"level\":1,\"name\":\"SoA - Chaos of Dionysus\"},{\"level\":1,\"name\":\"SoA - Flood of Poseidon\"},{\"level\":1,\"name\":\"SoA - Hunt of Artemis\"},{\"level\":1,\"name\":\"SoA - Knowledge of Apollo\"},{\"level\":1,\"name\":\"SoA - phyzical WKS harmonizer\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":0,\"karma\":0,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"sleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":4,\"entropy\":0,\"lastUpdate\":1663753129740,\"lastSave\":1663753102543,\"totalPlaytime\":218012600,\"playtimeSinceLastAug\":74657600,\"playtimeSinceLastBitnode\":111200400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":-200000,\"work\":0,\"servers\":0,\"other\":-200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":-14499560576596783000,\"work\":0,\"servers\":-14499560571282280000,\"other\":-5314500000,\"augmentations\":0}},\"scriptProdSinceLastAug\":0,\"exploits\":[\"UndocumentedFunctionCall\",\"INeedARainbow\",\"YoureNotMeantToAccessThis\"],\"achievements\":[{\"ID\":\"FROZE\",\"unlockedOn\":1663535128573},{\"ID\":\"NS2\",\"unlockedOn\":1663535368563},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1663535428565},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1663540466746},{\"ID\":\"MAX_RAM\",\"unlockedOn\":1663540466753},{\"ID\":\"TOR\",\"unlockedOn\":1663540466757},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1663540526746},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1663541426741},{\"ID\":\"WORKOUT\",\"unlockedOn\":1663544496988},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1663544556991},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1663544556996},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1663544557001},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1663544557007},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1663544557013},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1663544616985},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1663544677015},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1663544736990},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1663544916985},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1663547076984},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1663547916985},{\"ID\":\"TRAVEL\",\"unlockedOn\":1663548336990},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1663548456999},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1663557576997},{\"ID\":\"NITESEC\",\"unlockedOn\":1663557876985},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1663560756985},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1663561536987},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1663561536993},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1663569536104},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1663569536128},{\"ID\":\"DONATION\",\"unlockedOn\":1663569536137},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1663569596104},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1663569656097},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1663570556101},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1663626974941},{\"ID\":\"RAINBOW\",\"unlockedOn\":1663629584677},{\"ID\":\"FAST_BN\",\"unlockedOn\":1663641836079},{\"ID\":\"SF1.1\",\"unlockedOn\":1663641944877},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1663642004881},{\"ID\":\"DEVMENU\",\"unlockedOn\":1663678427191},{\"ID\":\"INSTALL_100\",\"unlockedOn\":1663678487080}],\"terminalCommandHistory\":[\"run auto-hack.js backdoor The-Cave\",\"connect phantasy;connect netlink;connect I.I.I.I;connect alpha-ent;connect aerocorp;connect unitalife;connect icarus;connect zb-def;connect run4theh111z;connect stormtech;connect kuai-gong;connect clarkinc;connect The-Cave;backdoor\",\"home\",\"run auto-hack.js connect The-Cave\",\"connect The-Cave\",\"ls\",\"cat alpha-omega.lit\",\"scan\",\"connect w0rld_d43m0n\",\"connect w0r1d_d43m0n\",\"dir\",\"analyze\",\"backdoor\",\"mem auto-hack.js\",\"nano setup.js\",\"mem setup.js\",\"nano setup.js\",\"mem setup.js\",\"run setup.js\",\"mem setup.js\",\"run setup.js\",\"mem setup.js\",\"ns.autohack\",\"run auto-hack.js\",\"buy -l\",\"buy -a\",\"run auto-hack.js\",\"run ah.js\",\"analyze\",\"ls -l\",\"nano t1.js t2.js t3.js t4.js t5.js t6.js t7.js\",\"ls -l\",\"ls -l test\",\"dir test\",\"ls test\",\"ls my-scripts\",\"ls\",\"ls test\",\"ls my-scripts\",\"ls test/my-scripts\",\"ls /test\",\"dir\",\"dir test\",\"ls test\",\"ls test/my-scripts\",\"ls my-scripts/test\",\"dir\",\"dir my-scripts\",\"download\",\"download *\"],\"focus\":false,\"currentWork\":null,\"identifier\":\"171f3ef06af966\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":8,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"27.9.3.9\",\"isConnectedTo\":true,\"maxRam\":1073741824,\"messages\":[\"hackers-starting-handbook.lit\",\"truthgazer.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.hack('n00dles');\\n\\t}\\n}\",\"filename\":\"n00dles.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"n00dles.js\",\"url\":\"blob:file:///b7974874-6d03-45d4-b744-bffc54291a40\",\"moduleSequenceNumber\":9}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":29,\"queueCompile\":false,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst [host] = arguments[0].args;\\n\\tif (!host) { ns.tprint('No host specified'); return; }\\n\\t\\n\\t// ns.nuke(host);\\n\\t\\n\\t// ns.getPlayer();\\n\\t\\n\\t//const ls = ns.ls('home');\\n\\t//ns.tprint(ls);\\n\\n\\t// ns.alterReality();\\n\\n\\t// ns.tprint(JSON.stringify(this)); // empty, error no 'hasOwnProperty' without stringify\\n\\t// ns.tprint(`${this}`);\\n\\n\\tconst server = ns.getServer(host)\\n    const player = ns.getPlayer()\\n    \\n    if (server.hasAdminRights && server.backdoorInstalled) {\\n        ns.tprint(`${host} has already been nuked and has a backdoor installed!`)\\n        return\\n    }\\n\\n    if (player.skills.hacking < server.requiredHackingSkill) {\\n        ns.tprint(`You do not have the required skill (${player.skills.hacking} / ${server.requiredHackingSkill})`)\\n        return;\\n    }\\n\\n\\tif (!server.hasAdminRights) {\\n        if (!(await hackPorts(ns, host, server))) {\\n            ns.tprint(`Could not hack enough ports on ${host}, write some programs!`)\\n            return;\\n        }\\n\\n        await ns.nuke(host)\\n        ns.tprint(`${host} has been NUKED!`)\\n\\t} else {\\n        ns.tprint(`${host} is already nuked`)\\n    }\\n\\n    if (!server.backdoorInstalled) {\\n        ns.tprint(`typeof ns.installBackdoor is '${typeof ns.installBackdoor}'`)\\n        if (!ns.installBackdoor) {\\n            ns.tprint(`You need to manually install a backdoor on ${host}`)\\n            ns.tprint(`Run 'run find-server ${host}' to find a path to connect to it`)\\n            ns.tprint('Backdooring:')\\n            ns.tprint('    * is necessary for hacking challenges (i.e. CSEC)')\\n            ns.tprint('    * lets you connect directly to a server no matter where is is in the network')\\n            ns.tprint('    * gives you discounts and gyms/universities')\\n            ns.tprint('    * lowers penalties for stopping jobs early')\\n            ns.tprint('    * can be done automatically after getting to BN4 (the singularity)')\\n            ns.tprint('      (don\\\\'t worry about this until you know what a BitNode (BN) is, just play')\\n            ns.tprint('          the game and you will eventually find out :))')\\n            return;\\n        }\\n        ns.installBackdoor()\\n        ns.tprint(`Backdoor installed on ${host}!`)\\n    }\\n\\n    ns.tprint(`Server ${host} has been hacked!`)\\n\\t\\n    /*\\n    \\\"contracts\\\": [],\\n    \\\"cpuCores\\\": 1,\\n    \\\"ftpPortOpen\\\": false,\\n    \\\"hasAdminRights\\\": false,\\n    \\\"hostname\\\": \\\"foodnstuff\\\",\\n    \\\"httpPortOpen\\\": false,\\n    \\\"ip\\\": \\\"87.7.4.0\\\",\\n    \\\"isConnectedTo\\\": false,\\n    \\\"maxRam\\\": 16,\\n    \\\"messages\\\": [],\\n    \\\"organizationName\\\": \\\"FoodNStuff\\\",\\n    \\\"programs\\\": [],\\n    \\\"ramUsed\\\": 0,\\n    \\\"runningScripts\\\": [],\\n    \\\"scripts\\\": [],\\n    \\\"serversOnNetwork\\\": [],\\n    \\\"smtpPortOpen\\\": false,\\n    \\\"sqlPortOpen\\\": false,\\n    \\\"sshPortOpen\\\": false,\\n    \\\"textFiles\\\": [],\\n    \\\"purchasedByPlayer\\\": false,\\n    \\\"backdoorInstalled\\\": false,\\n    \\\"baseDifficulty\\\": 10,\\n    \\\"hackDifficulty\\\": 10,\\n    \\\"minDifficulty\\\": 3,\\n    \\\"moneyAvailable\\\": 2000000,\\n    \\\"moneyMax\\\": 50000000,\\n    \\\"numOpenPortsRequired\\\": 0,\\n    \\\"openPortCount\\\": 0,\\n    \\\"requiredHackingSkill\\\": 1,\\n    \\\"serverGrowth\\\": 5\\n\\t*/\\n}\\n\\nconst hackPorts = async (ns, host, server) => {\\n    const portApps = [\\n        [ns.ftpcrack, server.ftpPortOpen, 'FTPCrack.exe'],\\n        [ns.brutessh, server.sshPortOpen, 'BruteSSH.exe'],\\n        [ns.httpworm, server.httpPortOpen, 'HTTPWorm.exe'],\\n        [ns.sqlinject, server.sqlPortOpen, 'SQLInject.exe' ],\\n        [ns.relaysmtp, server.smtpPortOpen, 'relaySMTP.exe']\\n    ]\\n\\n    let portsNeeded = server.numOpenPortsRequired - server.openPortCount\\n    let needed = []\\n\\n    for (let i = 0; i < portApps.length && portsNeeded > 0; i++) {\\n        const [fn, flag, name] = portApps[i]\\n        if (flag) {\\n            ns.tprint(`Already open: ${name}`)\\n            continue;\\n        }\\n        if (!fn) {\\n            needed.push(name);\\n            ns.tprint(`Need to write ${name}`)\\n            continue;\\n        }\\n\\n        ns.tprint(`Running ${name}...`)\\n        await fn(host)\\n        portsNeeded--\\n    }\\n\\n    if (portsNeeded > 0) {\\n        ns.tprint(`Sorry, the server '${host}' needs ${portsNeeded} more ports open.`)\\n        ns.tprint(`Try to buy or write these programs: ${needed.join(', ')}`)\\n        return false;\\n    }\\n\\n    return true;\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///c4670255-9181-42f2-a19a-1e828e86c1b0\",\"moduleSequenceNumber\":1179}],\"dependents\":[],\"ramUsage\":6.4,\"server\":\"home\",\"moduleSequenceNumber\":30,\"queueCompile\":false,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\t// requires Source-File 5 to run (Singularity)\\n\\t// ns.tprint(JSON.stringify(ns.getBitNodeMultipliers(), null, 2));\\n\\n\\tvar logs = ns.getScriptLogs('t2.js', 'home');\\n\\tns.tprint(\\\"Logs:\\\");\\n\\tlogs.forEach(log => ns.tprint(log));\\n}\",\"filename\":\"t1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"t1.js\",\"url\":\"blob:file:///ec9937a1-f067-4b70-8a56-d4412a1cd941\",\"moduleSequenceNumber\":37}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":31,\"queueCompile\":false,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet i = 0;\\n\\twhile (true) {\\n\\t\\tns.print(`Logging:`, i++);\\n\\t\\tns.tprint('Logged ', i, ' times, sleeping for a few seconds...')\\n\\t\\tns.tprint('is logging enabled? ', ns.isLogEnabled('print'))\\n\\t\\tif ((i % 10) === 1) {\\n\\t\\t\\tawait ns.hack('n00dles');\\n\\t\\t}\\n\\t\\tawait ns.sleep(3000);\\n\\t}\\n}\",\"filename\":\"t2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"t2.js\",\"url\":\"blob:file:///684bd626-b5e5-4694-945f-74171092927e\",\"moduleSequenceNumber\":14}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":32,\"queueCompile\":false,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// t4.js - run on remote server to get info and log it for t5.js to access\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('disableLog')\\n\\tns.disableLog('getServer')\\n\\tns.disableLog('sleep')\\n\\tconst server = ns.getServer();\\n\\tconst data = { server }\\n\\tns.print(JSON.stringify(data));\\n\\twhile(true) await ns.sleep(5000);\\n}\",\"filename\":\"t4.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"t4.js\",\"url\":\"blob:file:///ec98c4d3-842c-492c-8ef0-b742412ffdee\",\"moduleSequenceNumber\":469}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":33,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\t// have access to the 'window' object as the global, I set 'window.my'\\n\\t// as a cheat object in my altered version of the game - cool!\\n\\t// ns.tprint(`'my' is a ${typeof my}`);\\n\\n\\t// you can alter the 'ns' object, but it gets reset between runs\\n\\tvar test = ns.servers;\\n\\tns.tprint(`ns.servers is: ${JSON.stringify(ns.servers)}`);\\n\\tns.servers = ns.servers || {}\\n\\tns.servers[ns.getHostname()] = ns.servers[ns.getHostname()] || {}\\n\\tns.servers[ns.getHostname()].runCount = (ns.servers[ns.getHostname()].runCount || 0) + 1;\\n\\tns.tprint(`ns.servers is now: ${JSON.stringify(ns.servers)}`);\\n\\n\\t// you can alter the 'window' global object no problem!\\n\\twindow.servers = window.servers || {};\\n\\tns.tprint(`window.servers is: ${JSON.stringify(window.servers)}`);\\n\\twindow.servers = servers || {}\\n\\twindow.servers[ns.getHostname()] = window.servers[ns.getHostname()] || {}\\n\\twindow.servers[ns.getHostname()].runCount = (window.servers[ns.getHostname()].runCount || 0) + 1;\\n\\tns.tprint(`window.servers is now: ${JSON.stringify(window.servers)}`);\\n}\",\"filename\":\"t3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"t3.js\",\"url\":\"blob:file:///b1acaa7c-028b-4c55-b97a-dc90a15736cc\",\"moduleSequenceNumber\":269}],\"dependents\":[],\"ramUsage\":26.65,\"server\":\"home\",\"moduleSequenceNumber\":34,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"dom\",\"name\":\"window\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst pid = ns.exec('t4.js', 'n00dles', 1, 'Hello, world!')\\n\\tns.tprint(`started with pid ${pid}`)\\n\\tawait ns.sleep(10)\\n\\tvar logs = ns.getScriptLogs('t4.js', 'n00dles', 'Hello, world!')\\n\\tns.scriptKill('t4.js', 'n00dles');\\n\\n\\tns.tprint('There are ${logs?.length} log entries!')\\n\\tns.tprint(JSON.stringify(logs, null, 2))\\n\\tvar parsed = JSON.parse(logs.join(''))\\n\\tns.tprint(`parsed is a ${typeof parsed}`)\\n\\tns.tprint(JSON.stringify(parsed, null, 2))\\n}\",\"filename\":\"t5.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"t5.js\",\"url\":\"blob:file:///83092dec-86f3-42fe-8c46-bc607ac6ad1d\",\"moduleSequenceNumber\":606}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home\",\"moduleSequenceNumber\":35,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// t7.js is run remotely by t6 to analyze a server\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst host = 'foodnstuff';\\n\\tconst hackAnalyze = ns.hackAnalyze(host)\\n\\tconst getServer = ns.getServer(host)\\n\\tconst data = {  hackAnalyze, getServer }\\n\\tns.tprint('\\\\r\\\\n' + JSON.stringify(data, null, 2))\\n}\",\"filename\":\"t7.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"t7.js\",\"url\":\"blob:file:///e8b56ecb-b638-4732-9cab-a60c48abee60\",\"moduleSequenceNumber\":677}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":36,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.tprint('arguments:')\\n\\tns.tprint(JSON.stringify(arguments))\\n\\tconst [host] = arguments[0].args\\n\\tns.tprint(`Getting info for '${host}'`)\\n\\tns.tprint(JSON.stringify(ns.getServer(host), null, 2))\\n}\",\"filename\":\"t6.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"t6.js\",\"url\":\"blob:file:///8e6f5559-15a0-4d70-9d6e-4a14d11e6abc\",\"moduleSequenceNumber\":1803}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":37,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const doc = (window)\\n\\n// this will scan the network and hack all the machines you can,\\n// and report\\n\\nconst formatRam = ram => {\\n\\tconst postfix = 'KB MG GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nlet first = true;\\nlet myns = null;\\n\\nconst formatMoney = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\t// double 18s are $1.000Q and $1000.000Q, same for 's'\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tif (first) {\\n\\t\\tfirst = false;\\n\\t}\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i++) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet [command, a1, a2, a3, a4] = ns.args\\n\\n\\tmyns = ns;\\n\\tconst parents = {}\\n\\tconst children = {}\\n\\tconst serverInfo = {}\\n\\tconst servers = []\\n\\tconst queue = []\\n\\tconst serverMessages = {}\\n\\tconst queued = {}\\n\\n\\t// test out formatRam(), seems to work fine\\n\\t// let amount = 1024\\n\\t// while (amount < Math.pow(10, 40)) {\\n\\t// \\tns.tprint(formatRam(amount))\\n\\t// \\tamount = amount * Math.pow(2, 5)\\n\\t// }\\n\\t// return\\n\\n\\t// test out formatMoney\\n\\t// let amount = 15.724921;\\n\\t// for (let i = 0; i < 309; i += 3) {\\n\\t// \\tns.tprint(`${i}: ${formatMoney(amount * Math.pow(10, i))}`)\\n\\t// }\\n\\t// return\\n\\n\\tconst doScan = async (host) => {\\n\\t\\tif (serverInfo[host]) return\\n\\t\\tservers.push(host)\\n\\t\\tns.tprint(`${host}: scanning...`)\\n\\t\\tvar server = await ns.getServer(host)\\n\\t\\tserverInfo[host] = server\\n\\t\\tchildren[host] = children[host] || []\\n\\n\\t\\t// hack server\\n\\t\\tif (!server.hasAdminRights) {\\n        \\tif (!(await hackPorts(ns, host, server))) {\\n            \\tns.tprint(`${host}: need more programs to nuke!`)\\n\\t\\t\\t\\tserverMessages[host] = 'Need to write more programs to nuke'\\n            \\treturn;\\n        \\t} else {\\n\\t\\t\\t\\tns.tprint(`${host}: nuking...`);\\n\\t\\t\\t\\tawait ns.nuke(host)\\n\\t\\t\\t\\tns.tprint(`${host}: NUKED!`)\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// scan\\n\\t\\tconst connected = await ns.scan(host)\\n\\t\\tconnected.forEach(connectedHost => {\\n\\t\\t\\tif (!queued[connectedHost]) {\\n\\t\\t\\t\\tqueue.push(connectedHost)\\n\\t\\t\\t\\tqueued[connectedHost] = true\\n\\t\\t\\t\\tchildren[host].push(connectedHost)\\n\\t\\t\\t\\tparents[connectedHost] = parents[connectedHost] || []\\n\\t\\t\\t\\tparents[connectedHost].push(host)\\n\\t\\t\\t}\\n\\t\\t})\\n\\t}\\n\\n\\tqueued[ns.getHostname()] = true\\n\\tqueue.push(ns.getHostname())\\n\\twhile (queue.length > 0) {\\n\\t\\tawait doScan(queue.shift());\\n\\t}\\n\\n\\t// ok, we may have hacked some servers, so let's refresh their infos\\n\\tfor (let i = 0; i < servers.length; i++) {\\n\\t\\tlet host = servers[i]\\n\\t\\tserverInfo[host] = await ns.getServer(host)\\n\\t}\\n\\n\\tconst reportWithChildren = (host, level = 0) => {\\n\\t\\tconst server = serverInfo[host]\\n\\t\\t// output will be tabbed basec on level (2 spaces)\\n\\t\\tconst padding = \\\"\\\".padStart(level * 2, ' ')\\n\\t\\tconst cores = `${server.cpuCores} core${server.cpuCores > 1 ? 's' : ''}`\\n\\t\\tconst ram = formatRam(server.maxRam * Math.pow(2, 30)) // it's in GB\\n\\t\\tconst arr = []\\n\\t\\tlet displayName = host\\n\\t\\tif (server.hasAdminRights) arr.push('ADMIN')\\n\\t\\tif (server.backdoorInstalled) {\\n\\t\\t\\tdisplayName = `[${host}]`\\n\\t\\t\\tarr.push('BACKDOOR')\\n\\t\\t} \\n\\t\\tns.tprint(`${padding}${displayName} ${cores} ${ram} [${arr.join(',')}] ${server.maxRam} ${formatMoney(server.moneyAvailable)}/${formatMoney(server.moneyMax)} ${server.hackDifficulty}/${server.minDifficulty} diff, ${server.serverGrowth} growth`)\\n\\n\\t\\tfor (let i = 0; i < children[host].length; i++) {\\n\\t\\t\\treportWithChildren(children[host][i], level + 1)\\n\\t\\t}\\n\\t}\\n\\n\\t// report on all servers, starting with our current one\\n\\tns.tprint('--------------------------------------------------------------------------------')\\n\\treportWithChildren(ns.getHostname())\\n\\n\\tns.tprint('--------------------------------------------------------------------------------')\\n\\tlet moneyServers = [...servers].sort((a, b) => {\\n\\t\\treturn serverInfo[a].moneyMax - serverInfo[b].moneyMax\\n\\t})\\n\\tlet maxServerLength = servers.reduce((p, c) => Math.max(c.length, p), 0)\\n\\tfor (let i = 0; i < moneyServers.length; i++) {\\n\\t\\tconst host = moneyServers[i]\\n\\t\\tconst server = serverInfo[host]\\n\\t\\tconst name = host.padEnd(maxServerLength, ' ')\\n\\t\\tconst money1 = `${formatMoney(server.moneyAvailable)}`.padStart(12)\\n\\t\\tconst money2 = `${formatMoney(server.moneyMax)} `.padStart(12)\\n\\t\\tconst difficulty = `${server.hackDifficulty}/${server.minDifficulty}`\\n\\t\\tconst growth = `growth: ${server.serverGrowth}`.padEnd(20)\\n\\t\\tns.tprint(`${name} ${money1} ${money2} ${growth} ${difficulty}`)\\n\\t}\\n\\n\\tif (command === 'connect' || command === 'backdoor') {\\n\\t\\tlet info = serverInfo[a1]\\n\\t\\tlet target = a1\\n\\t\\tif (!info) {\\n\\t\\t\\tns.tprint(`Trying to ${command}, but cannot find host ${a1}`)\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tlet commands = []\\n\\t\\twhile (a1) {\\n\\t\\t\\tif (a1 == 'home') {\\n\\t\\t\\t\\tcommands.unshift('home')\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tcommands.unshift(`connect ${a1}`)\\n\\t\\t\\tns.tprint(`Connecting to: '${a1}`)\\n\\t\\t\\tif (info.backdoorInstalled) break\\n\\t\\t\\ta1 = parents[a1]\\n\\t\\t\\tinfo = serverInfo[a1]\\n\\t\\t}\\n\\n\\t\\tif (command === 'backdoor') {\\n\\t\\t\\tcommands.push('backdoor')\\n\\t\\t}\\n\\t\\tif (commands[0] == 'home' && ns.getHostname() == 'home') commands.shift()\\n\\t\\tconst s = commands.join(';')\\n\\n\\t\\tconst terminalInput = doc.getElementById(\\\"terminal-input\\\");\\n\\t\\tif (!terminalInput) { ns.tprint('Cannot find \\\"terminal-input\\\" element!'); return }\\n\\t\\tconst handler = Object.keys(terminalInput)[1];\\n\\t\\tterminalInput.value = s;\\n\\t\\tterminalInput[handler].onChange({target:terminalInput});\\n\\t\\tterminalInput[handler].onKeyDown({ key:'Enter', preventDefault: () => null });\\n\\n\\t\\tif (command === 'backdoor') {\\n\\t\\t\\tlet checkInfo = ns.getServer(target)\\n\\t\\t\\twhile(!checkInfo.backdoorInstalled) {\\n\\t\\t\\t\\tawait ns.sleep(50)\\n\\t\\t\\t\\tcheckInfo = ns.getServer(target)\\n\\t\\t\\t}\\n\\t\\t\\tterminalInput.value = `home`;\\n\\t\\t\\tterminalInput[handler].onChange({target:terminalInput});\\n\\t\\t\\tterminalInput[handler].onKeyDown({ key:'Enter', preventDefault: () => null });\\n\\t\\t}\\n\\t\\tns.tprint('done!')\\n\\t}\\n}\\n\\n/// Automatically hack the ports on server required for nuking if possible\\n/** \\n * @param {NS} ns \\n * @param {string} host\\n * @param {string} server\\n*/\\nconst hackPorts = async (ns, host, server) => {\\n    const portApps = [\\n        ['ftpcrack', server.ftpPortOpen, 'FTPCrack.exe'],\\n        ['brutessh', server.sshPortOpen, 'BruteSSH.exe'],\\n        ['httpworm', server.httpPortOpen, 'HTTPWorm.exe'],\\n        ['sqlinject', server.sqlPortOpen, 'SQLInject.exe' ],\\n        ['relaysmtp', server.smtpPortOpen, 'relaySMTP.exe']\\n    ]\\n\\n    let portsNeeded = server.numOpenPortsRequired - server.openPortCount\\n    let needed = []\\n\\n    for (let i = 0; i < portApps.length && portsNeeded > 0; i++) {\\n        const [fnName, flag, name] = portApps[i]\\n        if (flag) {\\n            ns.tprint(`Already open: ${name}`)\\n            continue;\\n        }\\n        if (!ns[fnName]) {\\n            needed.push(name);\\n            ns.tprint(`Need to write ${name}`)\\n            continue;\\n        }\\n\\n        ns.tprint(`Running ${name}...  ns['${fnName}'] is a ${typeof ns[fnName]}`)\\n        if ((typeof ns[fnName]) == 'function') {\\n\\t\\t\\tif (ns.fileExists(name)) {\\n\\t\\t\\t\\tawait ns[fnName](host)\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.tprint(`WTF?!?!? the function exists, but not the file ${name}`)\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tns.tprint('is not a function now?  wtf?')\\n\\t\\t}\\n        portsNeeded--\\n    }\\n\\n    if (portsNeeded > 0) {\\n        ns.tprint(`Sorry, the server '${host}' needs ${portsNeeded} more ports open.`)\\n        ns.tprint(`Try to buy or write these programs: ${needed.join(', ')}`)\\n        return false;\\n    }\\n\\n    return true;\\n}\\n\\n// const connectCommand = async(ns, host) {\\n// \\tconst currentHost = server.getHostname()\\n// \\tconst searched = {}\\n// \\tconst parents = {}\\n// \\tconst queue = [currentHost]\\n// \\twhile (queue.length > 0) {\\n// \\t\\tconst host = queue.shift()\\n// \\t\\tif (searched[host]) continue\\n// \\t\\tsearched[host] = true\\n// \\t\\tconst connected = await ns.scan(host)\\n// \\t\\tfor (let i = 0; i < connected.length; i++) {\\n\\n// \\t\\t}\\n// \\t}\\n// }\",\"filename\":\"auto-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"auto-hack.js\",\"url\":\"blob:file:///e0860157-196a-4817-87e8-5a759942fdd0\",\"moduleSequenceNumber\":22780}],\"dependents\":[],\"ramUsage\":29,\"server\":\"home\",\"moduleSequenceNumber\":38,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"window\",\"cost\":25},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst host = arguments[0].args[0] || ns.getHostname()\\n\\tconst server = ns.getServer(host)\\n\\tns.tprint(`\\\\r\\\\n${JSON.stringify(server, null, 2)}`)\\n}\",\"filename\":\"server-info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"server-info.js\",\"url\":\"blob:file:///0599f07e-7d3a-4bb3-9ed0-cad5f6329c8f\",\"moduleSequenceNumber\":374}],\"dependents\":[],\"ramUsage\":3.65,\"server\":\"home\",\"moduleSequenceNumber\":39,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet [scriptName, runHost, moneyHost, count, extra ] = ns.args\\n\\t// 'extra' is so you can run this multiple times on a server\\n\\t\\n\\tconst server = await ns.getServer(runHost)\\n\\tconst { maxRam } = server\\n\\tawait ns.scp(scriptName, runHost)\\n\\tconst scriptRam = ns.getScriptRam(scriptName, runHost)\\n\\tif (!scriptRam) {\\n\\t\\tns.tprint('ERROR!!!!!  Could not get script ram on server')\\n\\t\\tconst data = { maxRam, scriptRam, scriptName, runHost, moneyHost, count, threads }\\n\\t\\tns.tprint(JSON.stringify(data, null, 2))\\n\\t\\treturn\\n\\t}\\n\\tcount = count ? parseInt(count) : Math.trunc(maxRam / scriptRam)\\n\\tawait ns.exec(scriptName, runHost, count, moneyHost, extra)\\n\\tns.tprint(`started ${count} instances of ${scriptName} on ${runHost} targeting ${moneyHost}`)\\n}\",\"filename\":\"runon.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"runon.js\",\"url\":\"blob:file:///42b47392-2f8f-4f29-af8d-d668397b02ef\",\"moduleSequenceNumber\":2287}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":40,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet [ host ] = ns.args\\n\\twhile (true) {\\n\\t\\tawait ns.weaken(host)\\n\\t}\\n}\",\"filename\":\"remote-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"remote-weaken.js\",\"url\":\"blob:file:///412ec0ea-7a23-4e5b-b7f3-148c8b69d24f\",\"moduleSequenceNumber\":2186}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":41,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet [ host ] = ns.args\\n\\twhile (true) {\\n\\t\\tawait ns.grow(host)\\n\\t}\\n}\",\"filename\":\"remote-grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"remote-grow.js\",\"url\":\"blob:file:///c90b923a-9a64-41b1-8edc-ed829d8850ed\",\"moduleSequenceNumber\":2320}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":42,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet [ host ] = ns.args\\n\\twhile (true) {\\n\\t\\tawait ns.hack(host) // raises security by .002\\n\\t\\tawait ns.hack(host) // raises security by .002\\n\\t\\tawait ns.hack(host) // raises security by .002\\n\\t\\tawait ns.grow(host) // raises security by .004\\n\\t\\tawait ns.hack(host) // raises security by .002\\n\\t\\tawait ns.hack(host) // raises security by .002\\n\\t\\tawait ns.hack(host) // raises security by .002\\n\\t\\tawait ns.grow(host) // raises security by .004\\n\\t\\tawait ns.hack(host) // raises security by .002\\n\\t\\tawait ns.hack(host) // raises security by .002\\n\\t\\tawait ns.hack(host) // raises security by .002\\n\\t\\tawait ns.grow(host) // raises security by .004\\n\\t\\tawait ns.hack(host) // raises security by .002\\n\\t\\tawait ns.hack(host) // raises security by .002\\n\\t\\tawait ns.hack(host) // raises security by .002\\n\\t\\tawait ns.grow(host) // raises security by .004\\n\\t\\tawait ns.hack(host) // raises security by .002\\n\\t\\tawait ns.hack(host) // raises security by .002\\n\\t\\tawait ns.hack(host) // raises security by .002\\n\\t\\tawait ns.grow(host) // raises security by .004\\n\\t\\tawait ns.weaken(host) // lowers security by 0.050\\n\\t}\\n}\",\"filename\":\"remote-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"remote-hack.js\",\"url\":\"blob:file:///46032d3d-f761-45c3-aeff-b4590f5d1ee9\",\"moduleSequenceNumber\":2321}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":43,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet limit = ns.getPurchasedServerLimit()\\n\\tlet ram = ns.getPurchasedServerMaxRam()\\n\\tlet current = ns.getPurchasedServers()\\n\\tlet cost = ns.getPurchasedServerCost(ram)\\n\\tns.purchaseServer('mega', ram)\\n}\",\"filename\":\"purchase-servers.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"purchase-servers.js\",\"url\":\"blob:file:///613b1ecd-785f-4846-ab52-1a7b965be92c\",\"moduleSequenceNumber\":1673}],\"dependents\":[],\"ramUsage\":6.45,\"server\":\"home\",\"moduleSequenceNumber\":44,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet [ host ] = ns.args\\n\\twhile (true) {\\n\\t\\tawait ns.weaken(host) // lowers security by 0.050\\n\\t\\tawait ns.grow(host) // raises security by .004\\n\\t\\tawait ns.hack(host) // raises security by .002\\n\\t}\\n}\",\"filename\":\"remote-all.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"remote-all.js\",\"url\":\"blob:file:///32c05925-47e3-49c8-a1e2-a72c148b2389\",\"moduleSequenceNumber\":43}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":45,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// openDevMenu() // rick-roll\\r\\nprint(typeof(heart.break())\\r\\nprint(heart.break())\\r\\n// exploit() // gives script -1\\r\\n// alterReality()()\\r\\n// rainbow()('42')\\r\\n// rainbow() takes ns context, so use in .js.  It returns a function\",\"filename\":\"a.script\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":46,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\t// ns.tprint(typeof ns.rainbow(ns)) // guess should be a string\\n\\t// ns.tprint(typeof ns.rainbow('42')) // boolean\\n\\tns.tprint(ns.rainbow('n00dles'))\\n\\n\\t// ns.alterReality()() // not a function\\n\\t\\n\\t// ns.tprint(typeof(ns.heart.break())) // number\\n\\t// ns.tprint(ns.heart.break()) // -30\\n}\",\"filename\":\"a.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"a.js\",\"url\":\"blob:file:///aa78aa33-f8ba-4a5f-b82d-fe8a6e679ba2\",\"moduleSequenceNumber\":11414}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":47,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst contents = ns.read('top10000.txt')\\n\\tconst lines = contents.split('\\\\n').reverse()\\n\\tns.tprint(lines.length)\\n\\tns.tprint(lines[0].length)\\n\\tns.tprint(`'${lines[0]}'`)\\n\\tfor (let i = 0; i < lines.length; i++) {\\n\\t\\tconst guess = lines[i];\\n\\t\\tif (ns.rainbow(guess)) {\\n\\t\\t\\tns.tprint(`Answer is at index ${i}: '${guess}'`)\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tif ((i % 100) === 0) {\\n\\t\\t\\tns.tprint(`At ${i}/${lines.length} ...`)\\n\\t\\t}\\n\\t\\tns.print(`${i}`)\\n\\t\\tawait ns.sleep(10)\\n\\t}\\n}\",\"filename\":\"do-rainbow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"do-rainbow.js\",\"url\":\"blob:file:///2aba9ee9-7905-4e1e-82e5-08189174168b\",\"moduleSequenceNumber\":240}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":48,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst hack = () => ns.tprint('hello, world!')\\n}\",\"filename\":\"test-mem.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":49,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\t// Acquire a reference to the terminal list of lines.\\n\\t//const list = document.querySelector(\\\"#generic-react-container ul\\\");\\n\\n\\t// Inject some HTML.\\n\\t//list.insertAdjacentHTML('beforeend',`<li><p color=red>Hello, world!</p></li>`)\\n\\n\\t//ns.tprint(`document is a '${typeof document}'`)\\n\\t//ns.tprint(`document.querySelector is a '${typeof document.querySelector}'`)\\n\\t//ns.tprint(`document.getElementById is a '${typeof document.getElementById}'`)\\n\\t// <input aria-invalid=\\\"false\\\" autocomplete=\\\"off\\\" id=\\\"terminal-input\\\" type=\\\"text\\\" class=\\\"MuiInput-input MuiInputBase-input MuiInputBase-inputAdornedStart css-bcr43k-MuiInputBase-input-MuiInput-input\\\" value=\\\"\\\">\\n\\n\\tconst ul = document.getElementById('terminal')\\n\\tconst li = document.createElement('li')\\n\\t'MuiListItem-root MuiListItem-gutters MuiListItem-padding'.split(' ').forEach(x => li.classList.add(x))\\n\\t//li.setAttribute('class', 'makeStyles-nopadding-1421 MuiListItem-root MuiListItem-gutters MuiListItem-padding css-1hvpof1-MuiListItem-root')\\n\\t//li.setAttribute('class', 'makeStyles-nopadding-1421 MuiListItem-root MuiListItem-gutters MuiListItem-padding css-1hvpof1-MuiListItem-root')\\n\\tli.style.padding = '0'\\n\\tconst p = document.createElement('p')\\n\\t'MuiTypography-root MuiTypography-body1'.split(' ').forEach(x => p.classList.add(x))\\n\\t// p.setAttribute('class', 'makeStyles-primary-1426 MuiTypography-root MuiTypography-body1 css-f3yi4k-MuiTypography-root')\\n\\tp.style.color = \\\"red\\\"\\n\\tp.style.fontFamily = 'Lucida Console'\\n\\tp.style.margin = '0'\\n\\tp.innerText = \\\"Hello, world!\\\"\\n\\tli.appendChild(p)\\n/*\\n<li class=\\\"makeStyles-nopadding-1421 MuiListItem-root MuiListItem-gutters MuiListItem-padding css-1hvpof1-MuiListItem-root\\\">\\n<p class=\\\"makeStyles-primary-1426 MuiTypography-root MuiTypography-body1 css-f3yi4k-MuiTypography-root\\\">Running script with 1 thread(s), pid 10 and args: [].\\n</p>\\n</li>\\n*/\\n\\t//li.innerHTML = '<p style=\\\"color: red\\\">Hello, world!</p>'\\n\\tul.appendChild(li)\\n}\",\"filename\":\"test-terminal-html.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"test-terminal-html.js\",\"url\":\"blob:file:///a7189a68-620e-4316-bd53-ef0aff898a87\",\"moduleSequenceNumber\":1933}],\"dependents\":[],\"ramUsage\":26.6,\"server\":\"home\",\"moduleSequenceNumber\":50,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\t// Acquire a reference to the terminal text field\\n\\tconst terminalInput = document.getElementById(\\\"terminal-input\\\");\\n\\tif (!terminalInput) { ns.tprint('Cannot find \\\"terminal-input\\\" element!'); return }\\n\\tconst handler = Object.keys(terminalInput)[1];\\n\\tterminalInput.value=\\\"home;connect n00dles;\\\";\\n\\tterminalInput[handler].onChange({target:terminalInput});\\n\\tterminalInput[handler].onKeyDown({key:'Enter',preventDefault:()=>null});\\n}\",\"filename\":\"terminal-test-input.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"terminal-test-input.js\",\"url\":\"blob:file:///cab76648-cc7d-4eca-aa35-bbde30abdd16\",\"moduleSequenceNumber\":1189}],\"dependents\":[],\"ramUsage\":26.6,\"server\":\"home\",\"moduleSequenceNumber\":51,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// this will scan the network and hack all the machines you can,\\n// and report\\n\\nconst formatRam = ram => {\\n\\tconst postfix = 'KB MG GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nlet first = true;\\nlet myns = null;\\n\\nconst formatMoney = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\t// double 18s are $1.000Q and $1000.000Q, same for 's'\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tif (first) {\\n\\t\\tfirst = false;\\n\\t}\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i++) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tmyns = ns;\\n\\tconst parents = {}\\n\\tconst children = {}\\n\\tconst serverInfo = {}\\n\\tconst servers = []\\n\\tconst queue = []\\n\\tconst serverMessages = {}\\n\\tconst queued = {}\\n\\n\\t// test out formatRam(), seems to work fine\\n\\t// let amount = 1024\\n\\t// while (amount < Math.pow(10, 40)) {\\n\\t// \\tns.tprint(formatRam(amount))\\n\\t// \\tamount = amount * Math.pow(2, 5)\\n\\t// }\\n\\t// return\\n\\n\\t// test out formatMoney\\n\\t// let amount = 15.724921;\\n\\t// for (let i = 0; i < 309; i += 3) {\\n\\t// \\tns.tprint(`${i}: ${formatMoney(amount * Math.pow(10, i))}`)\\n\\t// }\\n\\t// return\\n\\n\\tconst doScan = async (host) => {\\n\\t\\tif (serverInfo[host]) return\\n\\t\\tservers.push(host)\\n\\t\\tns.tprint(`${host}: scanning...`)\\n\\t\\tvar server = await ns.getServer(host)\\n\\t\\tserverInfo[host] = server\\n\\t\\tchildren[host] = children[host] || []\\n\\n\\t\\t// hack server\\n\\t\\tif (!server.hasAdminRights) {\\n        \\tif (!(await hackPorts(ns, host, server))) {\\n            \\tns.tprint(`${host}: need more programs to nuke!`)\\n\\t\\t\\t\\tserverMessages[host] = 'Need to write more programs to nuke'\\n            \\treturn;\\n        \\t} else {\\n\\t\\t\\t\\tns.tprint(`${host}: nuking...`);\\n\\t\\t\\t\\tawait ns.nuke(host)\\n\\t\\t\\t\\tns.tprint(`${host}: NUKED!`)\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// scan\\n\\t\\tconst connected = await ns.scan(host)\\n\\t\\tconnected.forEach(connectedHost => {\\n\\t\\t\\tif (!queued[connectedHost]) {\\n\\t\\t\\t\\tqueue.push(connectedHost)\\n\\t\\t\\t\\tqueued[connectedHost] = true\\n\\t\\t\\t\\tchildren[host].push(connectedHost)\\n\\t\\t\\t\\tparents[connectedHost] = parents[connectedHost] || []\\n\\t\\t\\t\\tparents[connectedHost].push(host)\\n\\t\\t\\t}\\n\\t\\t})\\n\\t}\\n\\n\\tqueued[ns.getHostname()] = true\\n\\tqueue.push(ns.getHostname())\\n\\twhile (queue.length > 0) {\\n\\t\\tawait doScan(queue.shift());\\n\\t}\\n\\n\\t// ok, we may have hacked some servers, so let's refresh their infos\\n\\tfor (let i = 0; i < servers.length; i++) {\\n\\t\\tlet host = servers[i]\\n\\t\\tserverInfo[host] = await ns.getServer(host)\\n\\t}\\n\\n\\tconst reportWithChildren = (host, level = 0) => {\\n\\t\\tconst server = serverInfo[host]\\n\\t\\t// output will be tabbed basec on level (2 spaces)\\n\\t\\tconst padding = \\\"\\\".padStart(level * 2, ' ')\\n\\t\\tconst cores = `${server.cpuCores} core${server.cpuCores > 1 ? 's' : ''}`\\n\\t\\tconst ram = formatRam(server.maxRam * Math.pow(2, 30)) // it's in GB\\n\\t\\tconst arr = []\\n\\t\\tlet displayName = host\\n\\t\\tif (server.hasAdminRights) arr.push('ADMIN')\\n\\t\\tif (server.backdoorInstalled) {\\n\\t\\t\\tdisplayName = `[${host}]`\\n\\t\\t\\tarr.push('BACKDOOR')\\n\\t\\t} \\n\\t\\tns.tprint(`${padding}${displayName} ${cores} ${ram} [${arr.join(',')}] ${server.maxRam} ${formatMoney(server.moneyAvailable)}/${formatMoney(server.moneyMax)} ${server.hackDifficulty}/${server.minDifficulty} diff, ${server.serverGrowth} growth`)\\n\\n\\t\\tfor (let i = 0; i < children[host].length; i++) {\\n\\t\\t\\treportWithChildren(children[host][i], level + 1)\\n\\t\\t}\\n\\t}\\n\\n\\t// report on all servers, starting with our current one\\n\\tns.tprint('--------------------------------------------------------------------------------')\\n\\treportWithChildren(ns.getHostname())\\n\\n\\tns.tprint('--------------------------------------------------------------------------------')\\n\\tlet moneyServers = [...servers].sort((a, b) => {\\n\\t\\treturn serverInfo[a].moneyMax - serverInfo[b].moneyMax\\n\\t})\\n\\tlet maxServerLength = servers.reduce((p, c) => Math.max(c.length, p), 0)\\n\\tfor (let i = 0; i < moneyServers.length; i++) {\\n\\t\\tconst host = moneyServers[i]\\n\\t\\tconst server = serverInfo[host]\\n\\t\\tconst name = host.padEnd(maxServerLength, ' ')\\n\\t\\tconst money1 = `${formatMoney(server.moneyAvailable)}`.padStart(12)\\n\\t\\tconst money2 = `${formatMoney(server.moneyMax)} `.padStart(12)\\n\\t\\tconst difficulty = `${server.hackDifficulty}/${server.minDifficulty}`\\n\\t\\tconst growth = `growth: ${server.serverGrowth}`.padEnd(20)\\n\\t\\tns.tprint(`${name} ${money1} ${money2} ${growth} ${difficulty}`)\\n\\t}\\n}\\n\\n/// Automatically hack the ports on server required for nuking if possible\\nconst hackPorts = async (ns, host, server) => {\\n    const portApps = [\\n        [ns.ftpcrack, server.ftpPortOpen, 'FTPCrack.exe'],\\n        [ns.brutessh, server.sshPortOpen, 'BruteSSH.exe'],\\n        [ns.httpworm, server.httpPortOpen, 'HTTPWorm.exe'],\\n        [ns.sqlinject, server.sqlPortOpen, 'SQLInject.exe' ],\\n        [ns.relaysmtp, server.smtpPortOpen, 'relaySMTP.exe']\\n    ]\\n\\n    let portsNeeded = server.numOpenPortsRequired - server.openPortCount\\n    let needed = []\\n\\n    for (let i = 0; i < portApps.length && portsNeeded > 0; i++) {\\n        const [fn, flag, name] = portApps[i]\\n        if (flag) {\\n            ns.tprint(`Already open: ${name}`)\\n            continue;\\n        }\\n        if (!fn) {\\n            needed.push(name);\\n            ns.tprint(`Need to write ${name}`)\\n            continue;\\n        }\\n\\n        ns.tprint(`Running ${name}...`)\\n        await fn(host)\\n        portsNeeded--\\n    }\\n\\n    if (portsNeeded > 0) {\\n        ns.tprint(`Sorry, the server '${host}' needs ${portsNeeded} more ports open.`)\\n        ns.tprint(`Try to buy or write these programs: ${needed.join(', ')}`)\\n        return false;\\n    }\\n\\n    return true;\\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":52,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\t// var names = 'ftpcrack brutessh httpworm sqlinject relaysmtp'.split(' ')\\n\\t// for (let i = 0; i < names.length; i++) {\\n\\t// \\tconst name = names[i]\\n\\t// \\tns.tprint(`${name} is a '${typeof ns['name']}'`)\\n\\t// }\\n\\n\\tawait ns.installBackdoor('n00dles')\\n\\tconst data = ns.server('n00dles')\\n\\tns.tprint(`\\\\r\\\\n${JSON.stringify(data, null, 2)}`)\\n}\",\"filename\":\"ah.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"ah.js\",\"url\":\"blob:file:///6ccc510e-8545-4536-a480-7c722aa0d5b5\",\"moduleSequenceNumber\":22839}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":53,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"test-terminal-line.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":54,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// this will scan the network and hack all the machines you can,\\n// and report\\n\\nconst formatRam = ram => {\\n\\tconst postfix = 'KB MG GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nlet first = true;\\nlet myns = null;\\n\\nconst formatMoney = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\t// double 18s are $1.000Q and $1000.000Q, same for 's'\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tif (first) {\\n\\t\\tfirst = false;\\n\\t}\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i++) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet [command, a1, a2, a3, a4] = ns.args\\n\\n\\tmyns = ns;\\n\\tconst parents = {}\\n\\tconst children = {}\\n\\tconst serverInfo = {}\\n\\tconst servers = []\\n\\tconst queue = []\\n\\tconst serverMessages = {}\\n\\tconst queued = {}\\n\\n\\t// test out formatRam(), seems to work fine\\n\\t// let amount = 1024\\n\\t// while (amount < Math.pow(10, 40)) {\\n\\t// \\tns.tprint(formatRam(amount))\\n\\t// \\tamount = amount * Math.pow(2, 5)\\n\\t// }\\n\\t// return\\n\\n\\t// test out formatMoney\\n\\t// let amount = 15.724921;\\n\\t// for (let i = 0; i < 309; i += 3) {\\n\\t// \\tns.tprint(`${i}: ${formatMoney(amount * Math.pow(10, i))}`)\\n\\t// }\\n\\t// return\\n\\n\\tconst doScan = async (host) => {\\n\\t\\tif (serverInfo[host]) return\\n\\t\\tservers.push(host)\\n\\t\\tns.tprint(`${host}: scanning...`)\\n\\t\\tvar server = await ns.getServer(host)\\n\\t\\tserverInfo[host] = server\\n\\t\\tchildren[host] = children[host] || []\\n\\n\\t\\t// hack server\\n\\t\\tif (!server.hasAdminRights) {\\n        \\tif (!(await hackPorts(ns, host, server))) {\\n            \\tns.tprint(`${host}: need more programs to nuke!`)\\n\\t\\t\\t\\tserverMessages[host] = 'Need to write more programs to nuke'\\n            \\treturn;\\n        \\t} else {\\n\\t\\t\\t\\tns.tprint(`${host}: nuking...`);\\n\\t\\t\\t\\tawait ns.nuke(host)\\n\\t\\t\\t\\tns.tprint(`${host}: NUKED!`)\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// scan\\n\\t\\tconst connected = await ns.scan(host)\\n\\t\\tconnected.forEach(connectedHost => {\\n\\t\\t\\tif (!queued[connectedHost]) {\\n\\t\\t\\t\\tqueue.push(connectedHost)\\n\\t\\t\\t\\tqueued[connectedHost] = true\\n\\t\\t\\t\\tchildren[host].push(connectedHost)\\n\\t\\t\\t\\tparents[connectedHost] = parents[connectedHost] || []\\n\\t\\t\\t\\tparents[connectedHost].push(host)\\n\\t\\t\\t}\\n\\t\\t})\\n\\t}\\n\\n\\tqueued[ns.getHostname()] = true\\n\\tqueue.push(ns.getHostname())\\n\\twhile (queue.length > 0) {\\n\\t\\tawait doScan(queue.shift());\\n\\t}\\n\\n\\t// ok, we may have hacked some servers, so let's refresh their infos\\n\\tfor (let i = 0; i < servers.length; i++) {\\n\\t\\tlet host = servers[i]\\n\\t\\tserverInfo[host] = await ns.getServer(host)\\n\\t}\\n\\n\\tconst reportWithChildren = (host, level = 0) => {\\n\\t\\tconst server = serverInfo[host]\\n\\t\\t// output will be tabbed basec on level (2 spaces)\\n\\t\\tconst padding = \\\"\\\".padStart(level * 2, ' ')\\n\\t\\tconst cores = `${server.cpuCores} core${server.cpuCores > 1 ? 's' : ''}`\\n\\t\\tconst ram = formatRam(server.maxRam * Math.pow(2, 30)) // it's in GB\\n\\t\\tconst arr = []\\n\\t\\tlet displayName = host\\n\\t\\tif (server.hasAdminRights) arr.push('ADMIN')\\n\\t\\tif (server.backdoorInstalled) {\\n\\t\\t\\tdisplayName = `[${host}]`\\n\\t\\t\\tarr.push('BACKDOOR')\\n\\t\\t} \\n\\t\\tns.tprint(`${padding}${displayName} ${cores} ${ram} [${arr.join(',')}] ${server.maxRam} ${formatMoney(server.moneyAvailable)}/${formatMoney(server.moneyMax)} ${server.hackDifficulty}/${server.minDifficulty} diff, ${server.serverGrowth} growth`)\\n\\n\\t\\tfor (let i = 0; i < children[host].length; i++) {\\n\\t\\t\\treportWithChildren(children[host][i], level + 1)\\n\\t\\t}\\n\\t}\\n\\n\\t// report on all servers, starting with our current one\\n\\tns.tprint('--------------------------------------------------------------------------------')\\n\\treportWithChildren(ns.getHostname())\\n\\n\\tns.tprint('--------------------------------------------------------------------------------')\\n\\tlet moneyServers = [...servers].sort((a, b) => {\\n\\t\\treturn serverInfo[a].moneyMax - serverInfo[b].moneyMax\\n\\t})\\n\\tlet maxServerLength = servers.reduce((p, c) => Math.max(c.length, p), 0)\\n\\tfor (let i = 0; i < moneyServers.length; i++) {\\n\\t\\tconst host = moneyServers[i]\\n\\t\\tconst server = serverInfo[host]\\n\\t\\tconst name = host.padEnd(maxServerLength, ' ')\\n\\t\\tconst money1 = `${formatMoney(server.moneyAvailable)}`.padStart(12)\\n\\t\\tconst money2 = `${formatMoney(server.moneyMax)} `.padStart(12)\\n\\t\\tconst difficulty = `${server.hackDifficulty}/${server.minDifficulty}`\\n\\t\\tconst growth = `growth: ${server.serverGrowth}`.padEnd(20)\\n\\t\\tns.tprint(`${name} ${money1} ${money2} ${growth} ${difficulty}`)\\n\\t}\\n\\n\\tif (command === 'connect' || command === 'backdoor') {\\n\\t\\tlet info = serverInfo[a1]\\n\\t\\tif (!info) {\\n\\t\\t\\tns.tprint(`Trying to ${command}, but cannot find host ${a1}`)\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tlet commands = []\\n\\t\\twhile (a1) {\\n\\t\\t\\tif (a1 == 'home') {\\n\\t\\t\\t\\tcommands.unshift('home')\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tcommands.unshift(`connect ${a1}`)\\n\\t\\t\\tns.tprint(`Connecting to: '${a1}`)\\n\\t\\t\\tif (info.backdoorInstalled) break\\n\\t\\t\\ta1 = parents[a1]\\n\\t\\t\\tinfo = serverInfo[a1]\\n\\t\\t}\\n\\n\\t\\tif (command === 'backdoor') commands.push('backdoor')\\n\\t\\tif (commands[0] == 'home' && ns.getHostname() == 'home') commands.shift()\\n\\t\\tns.write('notdone.txt', ``)\\n\\t\\tcommands.push('home')\\n\\t\\tcommands.push('cp notdone.txt done.txt')\\n\\t\\tconst s = commands.join(';')\\n\\t\\tns.tprint('running:')\\n\\t\\tns.tprint(s)\\n\\t\\tconst terminalInput = document.getElementById(\\\"terminal-input\\\");\\n\\t\\tif (!terminalInput) { ns.tprint('Cannot find \\\"terminal-input\\\" element!'); return }\\n\\t\\tconst handler = Object.keys(terminalInput)[1];\\n\\t\\tterminalInput.value = s;\\n\\t\\tterminalInput[handler].onChange({target:terminalInput});\\n\\t\\tterminalInput[handler].onKeyDown({ key:'Enter', preventDefault: () => null });\\n\\n\\t\\tawait ns.sleep(50)\\n\\t\\twhile(!ns.fileExists('done.txt')) {\\n\\t\\t\\tns.tprint(`on: ${ns.getHostname()}`)\\n\\t\\t\\tawait ns.sleep(50)\\n\\t\\t}\\n\\t\\tns.rm('done.txt')\\n\\t\\tns.tprint('done!')\\n\\t}\\n}\\n\\n/// Automatically hack the ports on server required for nuking if possible\\n/** \\n * @param {NS} ns \\n * @param {string} host\\n * @param {string} server\\n*/\\nconst hackPorts = async (ns, host, server) => {\\n    const portApps = [\\n        ['ftpcrack', server.ftpPortOpen, 'FTPCrack.exe'],\\n        ['brutessh', server.sshPortOpen, 'BruteSSH.exe'],\\n        ['httpworm', server.httpPortOpen, 'HTTPWorm.exe'],\\n        ['sqlinject', server.sqlPortOpen, 'SQLInject.exe' ],\\n        ['relaysmtp', server.smtpPortOpen, 'relaySMTP.exe']\\n    ]\\n\\n    let portsNeeded = server.numOpenPortsRequired - server.openPortCount\\n    let needed = []\\n\\n    for (let i = 0; i < portApps.length && portsNeeded > 0; i++) {\\n        const [fnName, flag, name] = portApps[i]\\n        if (flag) {\\n            ns.tprint(`Already open: ${name}`)\\n            continue;\\n        }\\n        if (!ns[fnName]) {\\n            needed.push(name);\\n            ns.tprint(`Need to write ${name}`)\\n            continue;\\n        }\\n\\n        ns.tprint(`Running ${name}...  ns['${fnName}'] is a ${typeof ns[fnName]}`)\\n        if ((typeof ns[fnName]) == 'function') {\\n\\t\\t\\tif (ns.fileExists(name)) {\\n\\t\\t\\t\\tawait ns[fnName](host)\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.tprint(`WTF?!?!? the function exists, but not the file ${name}`)\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tns.tprint('is not a function now?  wtf?')\\n\\t\\t}\\n        portsNeeded--\\n    }\\n\\n    if (portsNeeded > 0) {\\n        ns.tprint(`Sorry, the server '${host}' needs ${portsNeeded} more ports open.`)\\n        ns.tprint(`Try to buy or write these programs: ${needed.join(', ')}`)\\n        return false;\\n    }\\n\\n    return true;\\n}\\n\\n// const connectCommand = async(ns, host) {\\n// \\tconst currentHost = server.getHostname()\\n// \\tconst searched = {}\\n// \\tconst parents = {}\\n// \\tconst queue = [currentHost]\\n// \\twhile (queue.length > 0) {\\n// \\t\\tconst host = queue.shift()\\n// \\t\\tif (searched[host]) continue\\n// \\t\\tsearched[host] = true\\n// \\t\\tconst connected = await ns.scan(host)\\n// \\t\\tfor (let i = 0; i < connected.length; i++) {\\n\\n// \\t\\t}\\n// \\t}\\n// }\",\"filename\":\"test-terminal-commands.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":30,\"server\":\"home\",\"moduleSequenceNumber\":55,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let helper = {}\\nhelper.win = this\\nhelper.doc = helper.win['t n e m c o d'.split(' ').reverse().join('')]\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.tprint('typeof win is ', typeof helper.win)\\n\\tns.tprint('typeof doc is ', typeof helper.doc)\\n\\tns.tprint('done!')\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///943eecb7-1e51-461c-9c85-47917c0f1526\",\"moduleSequenceNumber\":7799}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":56,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"top10000.txt\",\"text\":\"123456\\n123456789\\n111111\\npassword\\nqwerty\\nabc123\\n12345678\\npassword1\\n1234567\\n123123\\n1234567890\\n000000\\n12345\\niloveyou\\n1q2w3e4r5t\\n1234\\n123456a\\nqwertyuiop\\nmonkey\\n123321\\ndragon\\n654321\\n666666\\n123\\nmyspace1\\na123456\\n121212\\n1qaz2wsx\\n123qwe\\n123abc\\ntinkle\\ntarget123\\ngwerty\\n1g2w3e4r\\ngwerty123\\nzag12wsx\\n7777777\\nqwerty1\\n1q2w3e4r\\n987654321\\n222222\\nqwe123\\nqwerty123\\nzxcvbnm\\n555555\\n112233\\nfuckyou\\nasdfghjkl\\n12345a\\n123123123\\n1q2w3e\\nqazwsx\\ncomputer\\naaaaaa\\n159753\\niloveyou1\\nfuckyou1\\nprincess\\n789456123\\n11111111\\n123654\\nprincess1\\n888888\\nlinkedin\\nmichael\\nsunshine\\nfootball\\n11111\\n777777\\n1234qwer\\n999999\\nj38ifUbn\\nmonkey1\\nfootball1\\ndaniel\\nazerty\\na12345\\n123456789a\\n789456\\nasdfgh\\nlove123\\nabcd1234\\njordan23\\n88888888\\n5201314\\n12qwaszx\\nFQRG7CS493\\nashley\\nasdf\\nasd123\\nsuperman\\njessica\\nlove\\nsamsung\\nshadow\\nblink182\\n333333\\nmichael1\\nbabygirl1\\njesus1\\nqwert\\nk.:\\nbaseball\\ncharlie\\n0\\nhello1\\nsoccer\\nkiller\\n131313\\nmaster\\n1111111\\ngfhjkm\\n0123456789\\n987654\\niloveyou2\\nangel1\\njordan\\n147258369\\nbitch1\\nmichelle\\nq1w2e3r4\\njessica1\\nqwer1234\\n159357\\nsoccer1\\nliverpool\\n101010\\nzxcvbn\\nthomas\\nasdasd\\nfuckyou2\\njustin\\nnicole\\n1111111111\\n1\\n1111\\nqazwsxedc\\nbaseball1\\nandrew\\nhello\\napple\\n0987654321\\nanthony1\\n102030\\nmoney1\\nparola\\nabc\\n147258\\nanthony\\n111222\\njennifer\\nnumber1\\nnaruto\\n123456q\\n696969\\n00000000\\njoshua\\ngolfer\\n29rsavoy\\nmyspace\\nandrea\\nbasketball\\nqwerty12\\ncharlie1\\npassw0rd\\nasshole1\\nhunter\\nmarina\\nwelcome\\n010203\\nsuperman1\\npassword12\\nxbox360\\nsunshine1\\nashley1\\nlovely\\nbabygirl\\n!\\ntrustno1\\n666\\nasdf1234\\nchocolate\\nbuster\\nsummer\\ntigger\\npurple\\nfreedom\\nloveme\\nmatthew\\n50cent\\npassword2\\nmaggie\\ngeorge\\nchelsea\\n12341234\\namanda\\nhannah\\nq1w2e3\\nfriends\\nshadow1\\nwilliam\\nabcdefg\\nsamantha\\n12344321\\nnicole1\\nq1w2e3r4t5y6\\nrobert\\nmother\\njordan1\\nsecret\\nletmein\\nqweasdzxc\\n212121\\npokemon\\n$HEX\\ninternet\\nbatman\\nlove12\\na123456789\\nVQsaBLPzLa\\nqweqwe\\nhello123\\n232323\\nbutterfly\\nmartin\\nflower\\nforever\\nmustang\\n1qazxsw2\\niloveu\\ncjmasterinf\\norange\\nharley\\nuser\\nbrandon1\\nlondon\\n1234567891\\npepper\\nchris1\\nlol123\\nabcdef\\nwhatever\\n1342\\nalexander\\nloveyou\\n290966\\nwall.e\\njunior\\n12413\\nqweasd\\nPE#5GZ29PTZMSE\\ntudelft\\ndpbk1234\\nDIOSESFIEL\\nU38fa39\\n147852\\ncookie\\nfamily\\njasmine\\ndragon1\\n12345q\\nnikita\\npakistan\\n123654789\\n123789\\namanda1\\njoseph\\nhappy1\\nginger\\n:\\nmatthew1\\nsnoopy\\njustin1\\nlastfm\\n3rJs1la7qE\\nпїЅпїЅпїЅпїЅпїЅпїЅ\\nantonio\\nbarcelona\\nmatrix\\ncomputer1\\nhottie1\\nsophie\\nsandra\\nmichelle1\\n12345678910\\nqqqqqq\\narsenal\\n444444\\nbrandon\\ndaniel1\\njonathan\\nkiller1\\nliverpool1\\nmickey\\nghbdtn\\npurple1\\nmercedes\\npatrick\\n11223344\\ndiamond\\n456789\\nvictoria\\nasshole\\ntaylor\\nqwertyu\\nandrew1\\nred123\\nlucky1\\neminem\\n12345qwert\\n111222tianya\\nyellow\\nwilliam1\\nbailey\\nangel\\nchicken1\\nrichard\\n0000\\nbanana\\n0000000000\\njasmine1\\nbenjamin\\nwelcome1\\nstarwars\\nhunter1\\ncheese\\nmelissa\\nangela\\nchristian\\n1234554321\\noliver\\nchocolate1\\nbutterfly1\\npeanut\\n55555\\nhockey\\nmylove\\nnatasha\\nNULL\\nmommy1\\n1234561\\nq1w2e3r4t5\\namerica\\n252525\\nmonster\\nschool\\n456123\\njames1\\nslipknot\\nhannah1\\nzaq12wsx\\nchicken\\n147852369\\ngabriel\\nelizabeth\\ncookie1\\nStatus\\n87654321\\nrobert1\\nferrari\\nnathan\\n1password\\nbuddy1\\n1314520\\namerica1\\nmetallica\\nchelsea1\\nzzzzzz\\nprince\\nadidas\\njackson\\nmorgan\\nrainbow\\nsilver\\n1234567a\\nangels\\niw14Fi9j\\nloveme1\\njuventus\\njennifer1\\n!~!1\\nbubbles\\nsamuel\\nfuckoff\\nlovers\\ncheese1\\n0123456\\n123asd\\n999999999\\nmadison\\nelizabeth1\\nmusic\\nbuster1\\nlauren\\ndavid1\\ntigger1\\n123qweasd\\ntaylor1\\ncarlos\\ntinkerbell\\nsamantha1\\nSojdlg123aljg\\njoshua1\\npoop\\nstella\\nmyspace123\\nasdasd5\\nfreedom1\\nwhatever1\\nxxxxxx\\n00000\\nvalentina\\na1b2c3\\n741852963\\naustin\\nmonica\\nqaz123\\nlovely1\\nmusic1\\nharley1\\nfamily1\\nspongebob1\\nsteven\\nnirvana\\n1234abcd\\nhellokitty\\nthomas1\\n7654321\\nmadison1\\ndaddy1\\nsummer1\\ncocacola\\nnicholas\\nzxc123\\n123456m\\nqwertyui\\nspiderman\\nvanessa\\ndiamond1\\n142536\\ndanielle\\nbadoo\\n7758521\\nbandit\\npokemon1\\nmustang1\\n1qaz2wsx3edc\\nalexis\\nloulou\\njustinbieb\\nyamaha\\nqwert1\\nscooter\\nrachel\\ntennis\\nronaldo\\ni\\nmexico1\\nfriends1\\nvictor\\nmaggie1\\nasdfasdf\\nqwerty12345\\nlover1\\njesus\\n123hfjdk147\\nnicolas\\nbatman1\\nweed420\\npassword123\\nloser1\\n123456j\\niloveyou!\\npepper1\\nfuckoff1\\n555666\\niloveu2\\nsabrina\\npussy1\\nbubbles1\\n098765\\nmaster1\\nsmokey\\na1b2c3d4\\n123456789q\\nqwaszx\\nheather\\njasper\\nbooboo\\nheather1\\n4815162342\\npeanut1\\nchester\\n123456s\\n123456b\\ngoogle\\nedward\\nyankees1\\ncanada\\nExigent\\ndestiny\\nsuccess\\nnigger1\\n135790\\nasdfghjkl1\\n124578\\ncasper\\nlalala\\nmother1\\nsexy123\\nqazxsw\\nnaruto1\\n1q2w3e4r5t6y\\ndavid\\nmoney\\nyellow1\\npatrick1\\nflower1\\n12121212\\nalexander1\\nraiders1\\nPassword1\\nsebastian\\n134679\\nzxcvbnm1\\ndennis\\n852456\\nhahaha\\ndaniela\\nginger1\\nolivia\\nmelissa1\\n010101\\nslipknot1\\nspiderman1\\ncowboys1\\n0000000\\nrebecca\\n741852\\njeremy\\na1234567\\ndakota\\n123456d\\n1a2b3c\\napple1\\nnovember\\nalexandra\\n159951\\niloveu1\\nveronica\\nfuckme1\\nbaby123\\nyankees\\nstupid1\\ncristina\\nnewyork1\\njackson1\\nplayboy\\nfriend\\niloveyou12\\nsammy1\\npimpin1\\nphoenix\\nPolniyPizdec0211\\nrocky1\\npassword!\\njoseph1\\n753951\\np\\na838hfiD\\nrichard1\\nbeautiful1\\nmickey1\\ncarolina\\nj123456\\n202020\\nnewyork\\npatricia\\ncharles\\nstephanie\\norange1\\nm123456\\n421uiopy258\\nmyspace2\\ncameron\\nspider\\nbarbie\\nwoaini\\nvincent\\nmexico\\nscorpion\\nmonster1\\naaaaa\\nelephant\\nasdf123\\n963852741\\nzk.:\\nguitar\\nfucker1\\ndestiny1\\nhotmail\\njohnny\\ndoudou\\nq123456\\nbailey1\\nasdfgh1\\nfucker\\nlouise\\nsparky\\nsweety\\n123456abc\\nshorty1\\nbooboo1\\ndecember\\n9876543210\\nmanchester\\nmidnight\\n246810\\njessie\\ndallas\\naustin1\\ns123456\\npass\\n12345678a\\nclaudia\\nпїЅпїЅпїЅпїЅпїЅпїЅпїЅ\\nkristina\\nlakers\\nlovelove\\ncrazy1\\ntiger1\\nthunder\\ndolphin\\na\\ngangsta1\\njackie\\n151515\\ncharlotte\\nscooter1\\ncaroline\\nfuck\\nmerlin\\njunior1\\nsuper123\\nscooby\\nmarseille\\naaaa\\nmetallica1\\nkitty1\\nchris\\nbeautiful\\nblack1\\ndanielle1\\nblessed1\\nskater1\\n1029384756\\nqazwsx123\\n456456\\nb123456\\ngenius\\nguitar1\\ntyler1\\npeaches\\ncalifornia\\nsakura\\ntigers\\nsoleil\\nlauren1\\ngreen1\\nsmokey1\\ncooper\\n520520\\nmuffin\\nchristian1\\nlove13\\nfucku2\\narsenal1\\nlucky7\\ndiablo\\napples\\ngeorge1\\nbabyboy1\\ncrystal\\n1122334455\\nplayer1\\naa123456\\nvfhbyf\\nforever1\\nPassword\\nwinston\\nchivas1\\nsexy\\nhockey1\\n1a2b3c4d\\npussy\\nplayboy1\\nstalker\\ncherry\\ntweety\\ntoyota\\ncreative\\ngemini\\npretty1\\nпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ\\nmaverick\\nbrittany1\\nnathan1\\nletmein1\\ncameron1\\nsecret1\\ngoogle1\\nheaven\\nmartina\\nmurphy\\nspongebob\\nuQA9Ebw445\\nfernando\\npretty\\nstartfinding\\nsoftball\\ndolphin1\\nfuckme\\ntest123\\nqwerty1234\\nkobe24\\nalejandro\\nadrian\\nseptember\\naaaaaa1\\nbubba1\\nisabella\\nabc123456\\npassword3\\njason1\\nabcdefg123\\nloveyou1\\nshannon\\n100200\\nmanuel\\nleonardo\\nmolly1\\nflowers\\n123456z\\n007007\\npassword.\\n321321\\nmiguel\\nsamsung1\\nsergey\\nsweet1\\nabc1234\\nwindows\\nqwert123\\nvfrcbv\\npoohbear\\nd123456\\nschool1\\nbadboy\\n951753\\n123456c\\n111\\nsteven1\\nsnoopy1\\ngarfield\\nYAgjecc826\\ncompaq\\ncandy1\\nsarah1\\nqwerty123456\\n123456l\\neminem1\\n141414\\n789789\\nmaria\\nsteelers\\niloveme1\\nmorgan1\\nwinner\\nboomer\\nlolita\\nnastya\\nalexis1\\ncarmen\\nangelo\\nnicholas1\\nportugal\\nprecious\\njackass1\\njonathan1\\nyfnfif\\nbitch\\ntiffany\\nrabbit\\nrainbow1\\nangel123\\npopcorn\\nbarbara\\nbrandy\\nfuckyou!\\nstarwars1\\nbarney\\nnatalia\\nhiphop\\ntiffany1\\nshorty\\npoohbear1\\nsimone\\nalbert\\nmarlboro\\nhardcore\\ncowboys\\nsydney\\nalex\\nscorpio\\n1234512345\\nq12345\\nqq123456\\nonelove\\nbond007\\nabcdefg1\\neagles\\ncrystal1\\nazertyuiop\\nwinter\\nsexy12\\nangelina\\njames\\nsvetlana\\nfatima\\n123456k\\nicecream\\npopcorn1\\n121314\\njohn316\\nqazwsx1\\nvictoria1\\ntwilight\\niloveme\\n9379992\\npass123\\ndancer\\nbrittany\\nbeauty\\nbonjour\\nmaxwell\\ncoffee\\ndexter\\n454545\\nqazqaz\\nsnickers\\nlove11\\nsamson\\naaaaaaaa\\nswordfish\\nfyfcnfcbz\\nabcd123\\naaa111\\nnatalie\\nhottie\\npassion\\nalyssa\\nrockstar1\\nlovers1\\nflorida\\nalicia\\nhappy\\nblue123\\n123456t\\nranger\\nyourmom1\\npumpkin\\ndenise\\nedward1\\ntweety1\\nchristine\\naugust\\n54321\\nbella1\\nmarie1\\nseven7\\nsteelers1\\naaaaa1\\nshannon1\\namber1\\ncutie1\\npeaches1\\nflorida1\\nbonnie\\nstephanie1\\nlollipop\\ncassie\\nk.\\nrachel1\\ngreenday1\\nkrishna\\nteresa\\noctober\\niverson3\\nmotorola\\nrockstar\\nhahaha1\\npolice\\nlakers24\\nfylhtq\\nandrey\\nloveme2\\nturtle\\nsouthside1\\nbaby\\nbismillah\\npa55word\\nblessed\\nemmanuel\\n666999\\n012345\\nfluffy\\n5555555555\\nstupid\\nkarina\\nfishing\\nmusica\\npassword11\\nlove4ever\\nmelanie\\ngreenday\\nisabelle\\nnothing\\nabcd\\nchicago\\ncowboy\\nmnbvcxz\\nandrea1\\n242424\\nbabygurl1\\nsantiago\\nssssss\\nkevin1\\nlakers1\\nchester1\\n321654\\nkimberly\\ncarlos1\\nz123456\\ndaisy1\\njackass\\nm\\n5555555\\nzoosk\\nboston\\nhappy123\\n55555555\\nsatan666\\n111111a\\npamela\\n090909\\nfrancesco\\nhorses\\n456852\\nqwer\\nvanessa1\\nredsox\\npookie\\na12345678\\n110110\\ntucker\\nmarley\\ncorvette\\n778899\\nrealmadrid\\nraiders\\nrangers\\npeople\\n1123581321\\nsoccer12\\nsayang\\nshelby\\nchrist\\n12345t\\nfktrcfylh\\nkitten\\nplayer\\nc123456\\nqwert12345\\nbaby12\\ntrinity\\n1v7Upjw3nT\\np@ssw0rd\\nthunder1\\nzxcvbnm123\\nmidnight1\\nlebron23\\ngolden\\nstrawberry\\norlando\\nlove1234\\nlucky13\\nasdfg1\\nmarine\\nsoccer10\\nlucky\\nballer1\\n123123a\\nmagic\\nslayer\\nfender\\ndarkness\\nqw123321\\ndallas1\\nawesome\\nsophie1\\n22222222\\nd41d8cd98f00b204e9800998ecf8427e\\ncharles1\\ndancer1\\nlogitech\\nprincess12\\nbiteme\\nkissme\\nfreddy\\nqwerty7\\n159159\\nprecious1\\nbandit1\\nbanana1\\nя\\nasdfg\\nfrancis\\n963852\\neagles1\\nbrooklyn1\\nroberto\\nmarcus\\njacob1\\nemily1\\nsnowball\\ncourtney\\nwillow\\nwilson\\n123qwe123\\njohnny1\\nbrooklyn\\nvladimir\\n111222333\\nporsche\\nasdfghjk\\ndakota1\\nlizottes\\n171717\\nmonika\\n123454321\\n123qweasdzxc\\nbulldog\\njackie1\\nsuperstar\\nrebecca1\\ncamille\\ncatherine\\nnigga1\\n123698745\\nvkontakte\\ndanny1\\narthur\\nlorenzo\\ngetmoney1\\nhollister1\\nremember\\n1212\\nscooby1\\nkatie1\\ncherry1\\nmmmmmm\\nmaria1\\nchance\\nsweetie\\nricardo\\nabc12345\\nsarah\\n111111111\\nnapoli\\nqwe\\nlaura\\ncjkysirj\\ncricket\\n1qwerty\\nhammer\\n1478963\\nmoney123\\npantera\\nmaksim\\nbobby1\\nelement1\\nmylove1\\n123456r\\nsimple\\nP3Rat54797\\n234567\\nhoney1\\nfrancesca\\nalberto\\nsassy1\\nitalia\\nundertaker\\nasdfjkl;\\niceman\\n980099\\nfacebook\\nchouchou\\npassword7\\nkawasaki\\nlinkinpark\\nronaldo7\\njulian\\nasdasdasd\\nalessandro\\nmariana\\nbigboy1\\nlondon1\\noliver1\\ncookies\\nhotdog\\naaa\\ncourtney1\\nqqww1122\\n786786\\nsophia\\nbigdaddy\\nalyssa1\\nhallo\\nscarface\\nmontana\\nangelica\\n565656\\nlove22\\naustralia\\ntravis\\nparker\\nabcdef1\\nqti7Zxh18U\\nпїЅпїЅпїЅпїЅпїЅ\\ncool\\njason\\nsharon\\noscar1\\nspencer\\nchicago1\\nsoftball1\\nnatalie1\\nmonkey123\\nmariposa\\nsingle\\nrush2112\\npoop123\\nlinked\\nblabla\\noksana\\nsingle1\\n1234560\\nladybug\\nfather\\nasdfghj\\nbullshit\\nsunflower\\nmarvin\\nkevin\\neddie1\\nstephen\\n21212121\\nvolleyball\\nпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ\\nsweetpea\\nzxcvbnm:\\nskate1\\neduardo\\nbitch123\\ntigers1\\nnissan\\nz\\nbabygirl12\\ngoodluck\\ngateway1\\nbigdaddy1\\ngracie\\n1234321\\ntest\\n31415926\\nmike\\nchristina\\naleksandr\\nisabel\\ngabriel1\\nasdfjkl\\nihateyou\\ngateway\\ncat123\\nredsox1\\nconnor\\nantonio1\\nawesome1\\nfishing1\\namoremio\\nmonkey12\\nfucku1\\nlove69\\nlol\\nbrianna1\\nkayla1\\nzachary\\nindian\\nsierra\\nteacher\\nhoney\\nbianca\\nbitches1\\nprincesa\\nasdfghjkl;\\nchangeme\\n100000\\nP\\nplease\\nmartin1\\nbob123\\npasswort\\nmiller\\n123456e\\nbarbie1\\n181818\\nfrankie\\nestrella\\nvalentin\\ngenesis\\nclaire\\n12345qwerty\\nparadise\\n123321a\\nscarface1\\nxavier\\nsasuke\\nlove23\\nmohamed\\nvaleria\\njessie1\\njesus123\\njeremy1\\nsweetheart\\n5211314\\nrental\\nangels1\\nsweet\\nrosebud\\napples1\\npink123\\nwinnie\\npoopoo\\nqwertyuiop[]\\n1986\\nfuckyou123\\nP@ssw0rd\\nnigger\\nmyspace!\\nwilliams\\ngabriela\\nshelby1\\nbadboy1\\njaguar\\n123456g\\n77777777\\ndog123\\nrafael\\nmichele\\n1q1q1q\\nsexy69\\nfrance\\nsweet16\\nsilver1\\nchristopher\\njohnson\\n1989\\nsoccer11\\n8675309\\nzaqwsx\\nwestside\\n123456p\\nelena\\nnatali\\njimmy1\\nlollol\\nandrei\\ngiovanni\\napple123\\nruslan\\n7895123\\ntamara\\nzachary1\\nchristophe\\nfalcon\\n123457\\npolina\\nmonkey2\\njetaime\\n123456aa\\npumpkin1\\nnascar\\nminnie\\nsilvia\\nqqq111\\nangela1\\nlove101\\njerome\\nnirvana1\\n123zxc\\nolivia1\\ncassie1\\nhotmail1\\ncookies1\\n258456\\ntiger\\nshopping\\nj12345\\nabcde\\nwalter\\npassword5\\nzaq123\\nbabyboy\\nyahoo1\\ncamila\\nsuperstar1\\ndoctor\\nhawaii\\n262626\\nmaryjane\\nbenjamin1\\ndolphins\\nmargarita\\nlove14\\nnokia\\ncristian\\nqwerasdf\\nlover\\nhonda1\\ntintin\\nwwwwww\\nlalala1\\nmotdepasse\\ndisney\\n147896325\\nprince1\\n25802580\\nrey619\\nfuck123\\njohn\\nmarie\\nwestside1\\njenny1\\niloveyou.\\nblue22\\nqw123\\n123456789m\\ngrandma1\\ndbrnjhbz\\nabigail\\ndearbook\\n4444\\nchris123\\npepsi1\\n123456f\\nvampire\\npeople1\\naaaaaaa\\nalex123\\nskater\\n7758258\\njeffrey\\nladybug1\\nloveyou2\\nsairam\\ncompaq1\\npierre\\ngiuseppe\\nfootball12\\nsabrina1\\nseptember1\\n1bitch\\nicecream1\\nloverboy\\nkenneth\\nsterling\\nnelson\\nblack\\nйцукен\\nsuper\\nmaximus\\nchristina1\\nanimal\\nmegan1\\nbutter\\nvirginia\\nsavannah\\nspirit\\nbigboy\\ninuyasha1\\nblue\\nalejandra\\n123qaz\\n9111961\\nhallo123\\ntwilight1\\n123987\\ncoucou\\n909090\\nbrandy1\\nsparky1\\nsnickers1\\naudrey\\nfriendster\\npatches\\njamaica\\nbhf\\nadgjmptw\\n123456654321\\ntyler\\nchampion\\nbestfriend\\nbrenda\\nrhbcnbyf\\nhelpme\\nsuzuki\\ninternet1\\ncasper1\\nsergio\\ngreen\\nteddybear\\njavier\\ndreams\\nsultan\\nblessing\\nabcdefgh\\nunited\\nhappiness\\n191919\\npassword01\\ndiesel\\nfrankie1\\nfluffy1\\nTnk0Mk16VX\\nmuffin1\\n??????\\npookie1\\naaron1\\naaaaaaaaaa\\njustine\\n123000\\npenguin\\nflowers1\\ncupcake1\\nnikki1\\ncalvin\\nmaddie\\n323232\\nexigent\\nbrooke\\njohncena1\\nnewlife\\nmissy1\\n123456qwerty\\n192837465\\nPASSWORD\\nmadrid\\nraymond\\ncowboy1\\njasper1\\ntexas1\\nbrooke1\\nrangers1\\nk123456\\ntommy1\\nbulldog1\\nsimpsons\\nblahblah\\ncupcake\\ncarter\\nwillie\\nsunday\\nallison\\ncarpediem\\nsniper\\nfrancisco\\njasmin\\n19871987\\nviktor\\nmiranda\\nveronika\\nengland\\njanuary\\nпароль\\nchivas\\ndebbie\\nairforce1\\ninuyasha\\nbobby\\nbigdog\\nqwer123\\npanther\\nliberty\\ncasanova\\npenis1\\n123456789z\\n369369\\n123456y\\nchocolat\\njackson5\\nsam123\\npizza1\\nW5tXn36alfW\\nnintendo\\n321654987\\npoopoo1\\nsuper1\\n787878\\ntravis1\\njesus7\\nkelly1\\n445566\\nstar\\nadriana\\nhesoyam\\ncamaro\\nsmile\\nlorena\\ncancer\\nvictory\\nskyline\\ncopper\\nspeedy\\nanna\\nmonica1\\nlove10\\n19851985\\nhollywood\\n7777\\nmillie\\nrunescape1\\npass1234\\nbuddy\\nspencer1\\nmadonna\\ndreamer\\ncheyenne\\n223344\\n99999999\\nmanutd\\npanasonic\\nlegolas\\ngizmo1\\nanton\\nkitty\\ndominic\\ntrouble\\n123451\\npotter\\n12369874\\nciaociao\\nflorence\\nelement\\n123321123\\nqwertz\\npussy69\\nlove21\\nphoenix1\\nceline\\nanderson\\n12345m\\nwarcraft\\nsiemens\\ncool123\\ncorazon\\nhello12\\npoiuytrewq\\nl123456\\nsandra1\\nncc1701\\nmyspace12\\nhorses1\\ncolorado\\ndomino\\npimpin\\ndddddd\\nsoccer7\\n12345j\\nPassw0rd\\n2\\ngangster1\\nmamapapa\\nmercury\\nsweetie1\\nstudent\\nbradley\\nbusiness\\ntequiero\\nmaradona\\ngloria\\nrammstein\\n100\\ngeorgia\\nmanman\\ntristan\\nballin1\\nlittle1\\nUsdopaA\\ndarling\\n112358\\nmicrosoft\\nhotdog1\\nkelsey\\navatar\\nmonique\\nkimberly1\\nihateyou1\\nloser\\nasasas\\nturtle1\\nsoccer13\\nbabygirl2\\nbooger\\nnetwork\\nboston1\\nrocket\\nusdopaa\\nserena\\nhamster\\nvegeta\\ndonald\\nhollywood1\\napollo\\nangel12\\nwarrior\\nonline\\nbunny1\\nanastasia\\n12345s\\n6969\\njesus777\\nsystem\\nredneck1\\n1blood\\nzzzzzzzz\\npeace1\\nm12345\\nandres\\ntimothy\\nsports\\nlasvegas\\ntennis1\\njupiter\\n147147\\nstonecold\\nmaxwell1\\nstefan\\nregina\\nbingo1\\nmarcus1\\ncooper1\\nthebest\\nceltic\\nprincess2\\n19861986\\naurora\\nchloe1\\nsureno13\\nphilips\\nsandy1\\nsavannah1\\nblondie\\nwizard\\nleslie\\nengineer\\npaintball1\\n19841984\\nasdf12\\n135792468\\nsexyboy\\ntinker1\\namsterdam\\nskittles\\nmatteo\\nforever21\\nnicola\\njulien\\nbella\\nstanley\\n2222\\n14789632\\nstar123\\nmichel\\npuppy1\\nskippy\\n19921992\\norlando1\\njustice\\npackers\\nsexsex\\nchildren\\nchristmas\\nasdasd123\\ncocacola1\\n654123\\nkisses\\nsnowball1\\n123456123\\n98765\\nireland\\nrascal\\nsasha\\nrussia\\nlaura1\\ndylan1\\nbrianna\\nsex\\nasdzxc\\nsebastian1\\ndrowssap\\nsoccer123\\nkingkong\\nsister\\n123456123456\\ngangster\\n7894561230\\nshithead1\\nknight\\nbasket\\npatches1\\npippo\\n272727\\ntrouble1\\ntaurus\\nlegend\\n161616\\nmercedes1\\nMaprCheM56458\\npebbles\\n080808\\ndigital1\\nmax123\\nmaryjane1\\nstephen1\\nkelly\\nkathleen\\nmarshall\\nhahahaha\\nzaq1xsw2\\nsammy\\ngandalf\\nminecraft\\nmario\\ntitanic\\nargentina\\na123123\\nserenity\\na11111\\njesse1\\nheaven1\\ncatdog\\npassword4\\na1s2d3f4\\ngangsta\\ne123456\\nfelipe\\ndanger\\nalexandre\\njack\\nbenfica\\nchichi\\nbarcelona1\\n123789456\\nmilano\\npassword00\\nlouise1\\ngeorgia1\\nsmiley\\nmonday\\ncatdog1\\nfatboy1\\nmarcel\\nporsche1\\nmama\\n1qaz1qaz\\nmegaparol12345\\nwater1\\njamie1\\neclipse\\ngordon\\niG4abOX4\\nnigga\\ngregory\\ndragonball\\nfootball2\\nsimona\\nharvey\\nvictor1\\nhitman\\n12345r\\ncasey1\\npower1\\nbutter1\\nnathalie\\ntrinity1\\ncolombia\\nkiller123\\nbullshit1\\nterminator\\n69696969\\nonelove1\\ndonkey\\nhjvfirf\\npassword13\\nblood1\\nmozart\\nkitten1\\nteddy1\\nsasha1\\nrocky\\nbaseball12\\nlove15\\nnothing1\\nmyspace.\\nvalerie\\nhiphop1\\nindia\\nharrypotter\\npower\\nsecurity\\nelephant1\\nteddybear1\\nwinston1\\nharry1\\nsummer08\\ntoshiba\\nsexybitch1\\nwelcome123\\nranger1\\nkatherine\\nscotland\\ndinosaur\\nloveu2\\nsmile1\\n2004\\niloveyou3\\nsoccer2\\nzidane\\nfuckyou69\\n19891989\\n911911\\nadmin123\\npoiuyt\\nspanky\\nbaxter\\nphantom\\nbowwow1\\npppppp\\npass1\\nmarion\\nfederico\\nsuccess1\\nhelena\\ncutiepie1\\nviking\\npauline\\ngreen123\\ntrfnthbyf\\nd\\nciccio\\n12301230\\nspurs1\\n13579\\nmargaret\\ngodisgood\\nmom123\\ncharmed\\njenny\\ncharlotte1\\npikachu\\nsmiles\\nbeatles\\ndenise1\\n020202\\nstorm1\\nmario1\\nesther\\nrusty1\\na111111\\nspartak\\nunicorn\\n282828\\nbrian1\\nr123456\\nfantasy\\n11112222\\n19821982\\nviolet\\ndavid123\\nbeatrice\\nhardcore1\\nmarco\\neagle1\\nronald\\njoker1\\ncheer1\\ndamian\\n5555\\nbamboo\\nfranklin\\npenis\\n123456789s\\nлюбовь\\nvfvjxrf\\npenelope\\nmitchell\\npandora\\nsadie1\\nnfnmzyf\\nbambam\\nboomer1\\nmolly\\ncolt45\\ngracie1\\ntanner\\nmaurice\\nbooger1\\ndanny\\n147369\\n66666666\\nyoyoyo\\nhercules\\nkaterina\\npoopy1\\nfashion\\nallison1\\ncharmed1\\nbabydoll\\nfatboy\\nchristine1\\n123456987\\nbilly1\\nindia123\\nmonique1\\njimmy\\n19801980\\nsantos\\nsamuel1\\n1loveyou\\nffffff\\nqawsed\\nblue12\\n20102010\\nknopka\\njayjay\\nfender1\\nblackberry\\ndianne\\n19951995\\nalejandro1\\npiglet\\niloveme2\\n1234asdf\\nmusic123\\n9-11-1961\\njoel\\nskittles1\\nkatrina\\nsunny1\\ncharly\\ncdtnkfyf\\nfaith1\\nadrian1\\ns\\n44444\\ntokiohotel\\nass123\\ngibson\\n1234567q\\npeter\\nka_dJKHJsy6\\n987456\\nqazwsx12\\n789123\\nidontknow\\nbubble\\n123465\\ntruelove\\nmagic1\\ngarcia\\nhouston1\\ntomtom\\nkirill\\n313131\\nshithead\\ngalina\\nwolverine\\nspider1\\nlolipop\\nbradley1\\nmahalkita\\ncaprice\\nsexygirl1\\nybrbnf\\neinstein\\n135246\\ntimothy1\\ncecilia\\ngermany\\n19831983\\nyahoo.com\\nrobbie\\namelia\\npolska\\nenigma\\nplatinum\\nfroggy\\njoanna\\ncthutq\\nisabella1\\npassword10\\nwxcvbn\\nvalentine\\nvampires\\npassword0\\nsaturn\\nstrength\\ntucker1\\nasd123456\\n10101010\\nbaseball2\\nbadass1\\n123456h\\npimp123\\n11235813\\nchopper1\\nthx1138\\nsubaru\\nf\\n070707\\nmybaby1\\nf123456\\n123098\\nbarney1\\ng9l2d1fzPY\\nq1q1q1\\njamesbond\\ndeejay\\ngoldfish\\ncarolina1\\ndavide\\nlogan1\\n303030\\nvincent1\\nfabian\\nbigdog1\\nsummer09\\n000\\npackers1\\nmartinez\\ncanada1\\ncutiepie\\nfktrctq\\ndouglas\\nD1lakiss\\nqazxswedc\\ntatiana\\nkkkkkk\\ntrevor\\ndiamonds\\nferrari1\\nnapoleon\\n13131313\\npanther1\\nforest\\nmiriam\\nkelsey1\\nzxcv1234\\nangel2\\nmanager\\nlacrosse\\nfederica\\ndaisy\\n123456789j\\nsaibaba\\nnull\\npassport\\nmaxime\\nbuddy123\\nspring\\nronnie\\nomsairam\\naaa123\\nenglish\\nsugar1\\nkitkat\\nbulldogs\\nfriday\\nnadine\\n123456n\\n12345d\\ntinker\\naccess\\nkarate\\nilovehim1\\nadmin\\njames123\\nspike1\\ncleopatra\\nshalom\\nflatron\\nchiara\\ns12345\\ndigital\\ncandy\\n1qa2ws3ed\\nlittle\\ncatch22\\nchanel\\nLinkedin\\ncaptain\\ncatalina\\nwrestling1\\nrodrigo\\nalicia1\\nyamaha1\\neverton\\nchance1\\n753159\\nMegaparol12345\\nballer\\nfernanda\\ndance1\\nzxczxc\\nt123456\\nmaddie1\\nmyspace3\\nharrison\\n898989\\nblondie1\\nbuttercup\\namore\\npitbull\\nrfrfirf\\ncaramel\\nmuhammad\\nmedicine\\nbonnie1\\nberlin\\ntheman1\\nb\\nfuckme69\\ntheman\\nSZ9kQcCTwY\\npickle\\ngordon24\\nmoomoo\\nsteve1\\npeter1\\nsmoke1\\nbball1\\n19881988\\nredskins\\nlvbnhbq\\nllllll\\nc\\nstellina\\npunk\\nswimming\\nsk8ter\\nmisty1\\nj\\ngrace1\\n1234567899\\n2cute4u\\nkristen\\nchacha\\npa55w0rd\\nbritney\\nl\\ngeneral\\nskateboard\\nbbbbbb\\npebbles1\\nduncan\\nstargate\\nsmokie\\nlinkin\\nnatasha1\\ndrummer1\\npink\\nbilly\\nalaska\\nabigail1\\nlindsay\\nraymond1\\nthuglife\\nminnie1\\nbiteme1\\njohnson1\\npokemon123\\nhello2\\n521521\\nbananas\\nremember1\\nnorman\\nfamilia\\nsporting\\ngggggg\\nelaine\\nQWERTY\\nsalvatore\\noscar\\nblablabla\\nhandsome\\n102938\\nmarcos\\n77777\\nalison\\njohncena\\ncynthia\\nbrother\\n14531453\\n22222\\npenguin1\\nbudlight1\\ntommy\\npizza\\n2222222\\ninfinity\\na1a1a1\\n336699\\nmatt\\nnaruto123\\nmontana1\\n10203040\\nscoobydoo\\nfriend1\\n123456w\\ngunner\\njesuschrist\\ndevil666\\n222333\\nasd\\n44444444\\n420420\\nhacker\\nthebest1\\nwalker\\n1myspace\\nholly1\\nkittycat\\npineapple\\njayden1\\nwesley\\nqwerty11\\nholiday\\nstefano\\nveronica1\\nPolniyPizdec110211\\npoopie1\\nkissme1\\nengland1\\nmypassword\\narnold\\nsmoke420\\nsammie\\nellie\\nwordpass\\nlove01\\ntravel\\nlololo\\nrunner\\nasdfasdf1\\ndamien\\naaliyah1\\ngenesis1\\nandreas\\nlilwayne1\\n&#2336;\\ngrandma\\ndeath1\\nbonita\\nryan\\nspartan117\\nchopper\\nkkkkkkkk\\nelijah\\nsimple1\\nyourmom\\nmartha\\nhonda\\nsweets\\npassword9\\nmegan\\nalexandra1\\nsk84life\\nsalvador\\n2hot4u\\nnewport1\\ndaniel123\\nalabama\\niverson\\nbrenda1\\nпривет\\ndarkness1\\nmiguel1\\njayden\\nilovejesus\\nsummer07\\ndipset1\\n456654\\nelvis1\\nchevy1\\nbitches\\nrussell\\nsteve\\nangel13\\nmelanie1\\nlawrence\\nalabama1\\nmonkeys1\\nmememe\\npascal\\n314159\\npeterpan\\nmy3kids\\nperfect\\nvolcom1\\nlove09\\n111111q\\nmountain\\n3\\nbrutus\\ndaniele\\nslayer1\\nmarine1\\ndumbass1\\nsexy101\\nekaterina\\npink12\\n2012comeer\\nlollipop1\\ncricket1\\nblahblah1\\nflorian\\nloving\\nnorte14\\nsydney1\\nbullet\\nalessia\\n567890\\npapillon\\n12131415\\nmichigan\\nhummer\\nfuck69\\n654321a\\nfranco\\nreggie\\nkilla1\\nmikey1\\n19941994\\nmylife\\noicu812\\njjjjjj\\npanthers\\nidontknow1\\nphilip\\nhassan\\nroland\\ndragons\\nafrica\\npenny1\\nusa123\\nqwer12\\n111qqq\\n789654\\n369258147\\nzoey101\\n11111a\\nserega\\nchrist1\\niloveyou7\\nmexican1\\nrunescape\\nfordf150\\npinky1\\nk\\nhaha123\\nilovegod\\nhector\\nharry\\nspitfire\\npickles\\nwisdom\\nkatie\\nbrian\\nboobies\\n90210\\nthe\\nlove16\\nhouston\\ncollege\\nmurphy1\\n1234566\\naaron\\ngodzilla\\nsputnik\\ndeath\\nmonkeys\\n33333333\\njayjay1\\nazerty123\\n12345k\\nconnor1\\n19931993\\nwildcats\\nsoccer9\\nstartrek\\nsubzero\\ntest1234\\neugene\\nmohammed\\nfuckit1\\nbeauty1\\nrabbit1\\ngiulia\\nladygaga\\n343434\\nhughes\\nkisses1\\ng123456\\nfrank1\\njake\\nscotty\\nqweasd123\\nphoebe\\nmiller1\\njustme\\n123455\\nsoccer3\\ntherock\\nhg0209\\n1princess\\nmelody\\nmama123\\nsierra1\\ndragons1\\nbluefish\\nadidas1\\ngators\\nnick\\ndolphins1\\nqwerty321\\nbutthead\\nmiranda1\\ncassandra\\nbob\\ncjkywt\\npassword22\\nlinda1\\npopeye\\nsomething\\nqwe12345\\nlala123\\nbrasil\\ndragon123\\nsmiley1\\nshanna\\n12345z\\nskipper\\nsex123\\nn\\npitbull1\\nkermit\\nsaints\\nganesh\\nmoonlight\\npassword69\\nbambam1\\na1s2d3\\nnonmember\\nbubba\\naezakmi\\npimp12\\n5532361cnjqrf\\nyahoo\\nwinter1\\n19811981\\ntiger123\\npaloma\\npanthers1\\nmark\\nmarley1\\nily123\\nemily\\n363636\\nyoyoyo1\\njeffrey1\\nautumn\\ndodgers1\\ndickhead1\\ndragon12\\nmariah\\nguinness\\n123456asd\\nd12345\\nducati\\nbuttercup1\\nscott1\\nvampire1\\nloser123\\nironman\\n1lover\\nmatrix1\\nhoward\\ndIWtgm8492\\n12\\nbulldogs1\\n321456\\n505050\\nsexy13\\n123456789l\\ngolden1\\nmy3sons\\ndisney1\\n19901990\\nasdasd1\\nbest\\nmagnum\\ncheyenne1\\nbubble1\\nfriendship\\ndoggy1\\nburrito\\ncambiami\\nlinkedin1\\n5678\\nmar\\nabcde12345\\ntorres\\njamaica1\\n906090\\njacobs\\n258258\\nlindsey1\\nпїЅпїЅпїЅпїЅ\\n24680\\nmassimo\\npeewee\\nmaddog\\nstella1\\nelectra\\nteacher1\\ntrixie\\nzxcvbnm,./\\npoop12\\nbitch12\\nfirebird\\nchurch\\nscott\\nsandy\\njuliana\\nabcde1\\nyousuck1\\nmyspace.co\\nchange\\n525252\\nbabydoll1\\nsoccer5\\njoanne\\ndennis1\\ntequila\\n987456321\\nliliana\\nbluebird\\ndiana\\npanda1\\ncasablanca\\n1314521\\nlovebug\\nblood5\\namber\\npassword8\\nhello!\\ndeath666\\njulia\\nlarisa\\nlindsey\\nfred\\nkkkkkkk\\nlinda\\nantoine\\nathena\\n000111\\nletter\\ncarmen1\\nlizzie\\nhhhhhh\\nwatermelon\\nsurfer\\nasdqwe123\\npredator\\nsoccer14\\n19911991\\nbuddha\\n123qwerty\\nmike123\\ncandy123\\n235689\\nbabygurl\\ndustin\\nalfred\\ndenver\\nlucky123\\nw123456\\nmoney2\\napril1\\nloverboy1\\nlovelife\\nspecial1\\ncaitlin\\n989898\\n122333\\n123123q\\nfunny1\\n3rJs5la8qE\\n1987\\n3rJs1la2qE\\narchie\\nsweetpea1\\ninsanity\\nhershey\\n123456789d\\nronaldinho\\nbirthday\\nsunset\\ndustin1\\ncamilla\\nmoney12\\npussycat\\n123456qwe\\ntesting\\nbacchus\\npicasso\\nfountain\\nchristmas1\\n123456789k\\nsexygirl\\nviktoria\\ndfvgbh\\nkristen1\\nfreddie\\nlincoln\\nfatass1\\ntarzan\\nshadow12\\n20092009\\n258369\\nmyname\\nfuture\\nkenneth1\\nillinois\\ngiants\\nformula1\\nantonella\\n1357924680\\npeace\\ndaniels\\nyankees2\\ngoober\\n050505\\njaimatadi\\nclowns\\nmaison\\nsk8ordie\\nnoway\\nmybaby\\n1234567890q\\njustice1\\n1945\\nvalera\\ncanyon\\nriley1\\n132435\\nfuckyou12\\ntigger2\\nhey123\\nkitty123\\nxavier1\\nbroncos1\\ngregor\\npimp\\nqweqweqwe\\ndaddy\\nmyself\\nparamore\\ncoffee1\\n1984\\nking\\nvikings\\nbitch2\\nseason\\nprivate\\njacob\\nisrael\\nmatilda\\ndonkey1\\ntaco\\natlanta1\\npromise\\n321123\\nkenny1\\nalpha1\\ngrace\\nsimon\\nnikki\\n1985\\npioneer\\ncrazy\\nassassin\\nmagnet\\nalessandra\\n1951\\ncreative1\\nficken\\nлюблю\\np123456\\nelijah1\\nnaruto12\\nhayden\\nceleste\\ndrpepper\\nvalencia\\nhola\\nmanuela\\n19781978\\nlooking\\nnks230kjs82\\nlover123\\nnever\\n4200\\n12345b\\nturkey\\nlovebug1\\nsolomon\\nsheila\\nnemesis\\ndexter1\\nkiller12\\nalex12\\n01020304\\nbella123\\naaliyah\\nsunflower1\\nmariah1\\nboogie\\nboobies1\\ngabby1\\ndefender\\n143143\\nyoungmoney\\ngoldie\\njazzy1\\nwillie1\\nlast.fm\\nanhyeuem\\nmiracle\\nпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ\\n1022\\nbarbara1\\ndrummer\\nqazwsxedcrfv\\n1313\\nsasuke1\\nlilmama1\\n9999999999\\nbernard\\nsoccer4\\nalejandra1\\njulie\\nparis1\\nfuckme2\\n332211\\n123456789p\\nlucas\\nkingdom\\nmierda\\nfroggy1\\na000000\\nbadass\\nselena\\nyvonne\\npuppies\\ndesign\\nbroncos\\nshit\\nredskins1\\ndarkangel\\nliberty1\\nnewlife1\\nqwqwqw\\nthumper\\nsammy123\\nfamous1\\nbuttons\\nmonalisa\\njames23\\nlonely\\nbutterfly2\\nfresh1\\nyoung1\\nprettygirl\\ngetmoney\\nmarissa\\nraven1\\ntelefon\\nmanuel1\\nolivier\\nlizard\\nkurt\\ntemppass\\ndrpepper1\\n8888\\nschalke04\\npantera1\\noctober1\\nsexymama1\\npopopo\\nmorena\\na1b2c3d4e5\\n123321q\\n545454\\ntobias\\nwolves\\nagent007\\nspam\\nhotties\\narizona\\nsouth13\\nbubblegum1\\nwilson1\\n784512\\ntanner1\\njulian1\\nspooky\\n000001\\n777888\\nbonbon\\nqueen1\\nracing\\nwater\\nqazwsxedc1\\nswordfish1\\nscorpio1\\ndickhead\\nchloe\\npatricia1\\nstratus\\ncatherine1\\ndominic1\\nbigdick\\nmarissa1\\n666777\\ncherokee\\nmommy123\\nsimba1\\nspace1\\ncopper1\\nmolly123\\n369258\\nkatherine1\\nheyhey1\\nwidget\\ndupont\\nlorraine\\nmoomoo1\\nexplorer\\ncooldude\\nshirley\\nfucky0u\\njrcfyf\\nsweety1\\ncloud9\\nprivet\\ndarren\\ncxfcnmt\\nshaggy\\npencil\\nsimon1\\npepito\\nfrank\\nmyspace7\\nporsche911\\nwillow1\\ndude\\ncolombia1\\nbunny\\n12345679\\ntripper\\nromeo1\\ndeborah\\nCM6E7Aumn9\\n19791979\\n2222222222\\nsamurai\\ntheone\\nyomama1\\nevelyn\\nbearshare\\n1jesus\\nbeckham\\niluvu2\\nmarian\\nytrewq\\nsanane\\nmonkey7\\ngerman\\nqawsedrf\\nindonesia\\nmalibu\\ngood\\nazerty1\\nmonkey11\\njustdoit\\nmarines1\\nmorris\\ndeedee\\nvikings1\\nboubou\\ncool12\\nsimpson\\nalmond\\nkent\\naquarius\\n666888\\nvalentino\\nsexy11\\ncookie123\\nbaseball7\\npolice1\\n20082008\\nsigma\\n9999\\nseptember2\\n168168\\nlove08\\nkittycat1\\nticket\\nkissmyass\\nGroupd2013\\nspecial\\nas123456\\nhailey\\npickles1\\nmichigan1\\nshadow123\\nchargers1\\nbabyblue\\nskyline1\\nmaxmax\\ndelete\\nscoobydoo1\\nnovember1\\n*****\\nfuckit\\n100100\\ndadada\\nwrestling\\nhookem\\namores\\nwarrior1\\nsuperman12\\ngustavo\\ndylan\\n9999999\\nrahasia\\nbeaver\\npogiako\\nhenry1\\nricky1\\nrandom1\\npakistan1\\njosh\\nfreeman\\nronaldo9\\nrandom\\ncedric\\nghjcnj\\npeewee1\\npirate\\nvoodoo\\ndecember1\\npiazza\\ndalejr88\\ngeronimo\\nrosario\\ntheone1\\ngilbert\\nakopa123\\n789987\\nbollocks\\ndominique\\nsamson1\\nkennedy\\nfootball10\\nsublime\\nperfect1\\nmaganda\\nmonkey3\\n998877\\nthuglife1\\nmariam\\nsharp\\nibrahim\\nbrownie\\nghbdtnbr\\nfucking\\nblue13\\n333666\\ndragonfly\\nbadger\\nshelly\\nbigdick1\\nbaby13\\nsapphire\\nilove1\\nsnowman\\n000000000\\nmichael2\\njeremiah\\n86\\nhotstuff1\\n19961996\\nicehouse\\ncoming\\nlindsay1\\narea51\\nalways\\nbear\\n3333333\\n19751975\\nistanbul\\npaddle\\nconnie\\nb12345\\n030303\\nentropy\\nking123\\n6666\\n12345l\\ncarter1\\nnatalya\\nOcPOOok325\\nthailand\\nchris12\\njohanna\\npersonal\\npassion1\\ndodgers\\npassword23\\nhershey1\\n456321\\nlove143\\ncapricorn\\nhailey1\\nfucklove1\\nenergy\\nmason1\\nbabylove\\nvaffanculo\\nstanley1\\nfreddy1\\nmarketing\\n201314\\ntwins2\\nsamira\\ndoggie\\nmahalko\\nmadmax\\nannie1\\n123456789o\\nvision\\na1a2a3\\nrosie1\\nhihihi\\n2000\\nsandrine\\noooooo\\ndance\\nqwerqwer\\nsomething1\\ncharlene\\nbaseball3\\nangelito\\nfootball7\\nvolcom\\namerican\\ncubs\\naspirine\\nmaverick1\\nclaudia1\\nbrother1\\nlala\\nemilie\\n1qa2ws\\ntottenham\\nalbert1\\nwestlife\\nredbull\\njanice\\nclaudio\\nt:\\nboxcar\\n7777777777\\nsexxxy\\njeter2\\nlove24\\nkristin\\nsasasa\\n3333\\njoe123\\ncuddles\\nstar12\\npokemon12\\napril\\n99999\\nhotboy1\\nbobmarley\\nfortuna\\ndigger\\navalon\\nhotrod\\nemerald\\nzk.\\nteddy\\nsabina\\npoint\\nk12345\\nvacation\\nfake123\\nhotstuff\\nskyhawk\\nparker1\\ngarden\\nasdfghjkl:\\n1q2w3e4r5t6y7u8i9o0p\\nbeatriz\\npassword6\\ngarrett\\nbozo\\ngators1\\nmillie1\\nshawn1\\nstefania\\nhaha\\nnicole12\\ncamero1\\nspiderman3\\n000000a\\ncaroline1\\nomg123\\nmememe1\\nhorse1\\ngregory1\\nfellow\\n1236987\\nbroken1\\n353535\\nsmile123\\ngerard\\nchase1\\narmando\\nlane\\nsinger\\ndaddysgirl\\n1asshole\\nlollypop\\nmamama\\nvagina1\\n1988\\nlilwayne\\namigos\\nalice\\nharmony\\nlucifer\\ncashmoney1\\nqqqqqqqq\\nspeedy1\\ngjkbyf\\ntopgun\\nireland1\\ndelfin\\nadam\\nprincess10\\n1980\\nplease1\\nskate4life\\nspanky1\\nvanilla\\nscarlett\\ncallie\\nkaren1\\nasdfjkl:\\n1monkey\\npatriots1\\n11111q\\nbitch69\\nyankee\\nstinky\\njosephine\\ncallofduty\\nvagina\\n1982\\nredwings\\nprincesse\\nnightmare\\ngermany1\\nsoccer15\\nmagnolia\\nlonghorns1\\nmookie\\njohn123\\npoopy\\nhola123\\ntristan1\\nmicheal1\\ntestpass\\n112233445566\\ntornado\\ncurtis\\nsnowman1\\natlanta\\nshakira\\ndouglas1\\njulius\\njamie\\n888999\\nn123456\\nmollie\\nwicked1\\njudith\\ncutie\\nroberta\\nfamily5\\nsanchez\\nqwerty2\\nesperanza\\ndick\\nsunny\\nenterprise\\nbuffalo\\npoopie\\nh123456\\njesse\\nbenson\\nsachin\\nmaria123\\nmaster123\\nhearts\\njack123\\nwarcraft1\\n060606\\nqwe123456\\nsobaka\\nasdfg123\\nwilliams1\\nsports1\\ncinderella\\nmarshall1\\nbaseball11\\nmarkus\\nvincenzo\\npavilion\\nwallace\\ncheater1\\nshamrock\\npurple12\\naustralia1\\nsebastien\\nwinner1\\njellybean\\n111aaa\\ngoogle123\\ncccccc\\npanda\\nsamara\\nironmaiden\\nzombie\\nlaguna\\n3Odi15ngxB\\ncountry1\\nhelpme1\\ng-unit\\neternity\\ntrevor1\\nsister1\\n98765432\\nhammer1\\ntomcat\\n585858\\n192837\\nfaith\\nsimpsons1\\ncracker1\\nstacey\\npickle1\\nconnect\\ngabrielle\\nWelcome1\\nt\\nsusana\\nrebel1\\nsuperman2\\nsamsam\\nbogdan\\namour\\nshopping1\\ntoyota1\\nbettyboop1\\npeugeot\\nricardo1\\nwayne1\\nw1985a\\nmarlboro1\\nanimal1\\ntyson1\\njuggalo1\\n656565\\ntherock1\\nfrances\\nalessio\\nlove18\\ntheresa\\nethan1\\npop123\\nmonkey13\\ngarfield1\\narizona1\\nwarren\\nmandy1\\nfashion1\\nrolltide\\npreston\\n1234567890a\\ngundam\\npsycho\\niloveyou22\\nholland\\ndaniel12\\nnikola\\ntesttest\\nslayer666\\nninja1\\nbaseball10\\nholly\\nbuffy1\\nmouse1\\n393041123\\njordan12\\nA123456\\nmicheal\\n12qw23we\\nwashington\\nfish\\nvivian\\nrfnthbyf\\nw1980a\\njerry1\\nbananas1\\nronnie1\\nforget\\nburton\\nrockon\\nsuckit1\\nyasmin\\nwhitney\\nparis\\nmarines\\n123456789987654321\\nsunrise\\ngeheim\\nangie1\\ndriver\\nнаташа\\nbrownie1\\neverton1\\nashley12\\n123456789123\\n987654321a\\nlollol1\\njakjak\\npassat\\nw1990a\\nwangyut2\\nbutthead1\\nbanane\\nnewcastle\\nc12345\\nmagdalena\\nlove07\\nrosebud1\\naurelie\\nmamamia\\nbianca1\\nshane1\\nmanson\\nashley123\\nroman\\nkayla\\nbillabong\\narianna\\nbethany\\nrascal1\\n12345c\\nsammie1\\nboricua1\\nw1979a\\ngreat1\\n&#9679;&#9679;&#9679;&#9679;&#96\\nunderground\\nsteph1\\n12345abc\\n292929\\nblah\\nrenee1\\niloveyou11\\nsam\\nzvezda\\nchandler\\nqwe1122334\\nblackie\\nashton\\nandromeda\\nangel7\\npunkrock\\nrough\\njust4fun\\nxxx\\ndebbie1\\nhamilton\\nrose\\niloveyou13\\nfuckyou.\\nwhitney1\\nblacky\\nhernandez\\njuliette\\ngogogo\\nphillip\\n1q2w3e4\\nmamita\\n19761976\\nharold\\n6666666\\nflores\\ndreamer1\\n7\\npk3x7w9W\\ngolfcourse\\npineapple1\\ncoconut\\nmarius\\nenrique\\nbentley\\nromain\\nrjntyjr\\nhilary\\nnumber2\\ngodislove\\nmadeline\\nrooster\\nmy2girls\\nsuckit\\nbabycakes1\\n112211\\nyuantuo2012\\nmarianne\\ncountry\\n1983\\ncutie123\\nwildcats1\\n111000\\nloveme123\\nfireball\\ntoronto\\n1010\\nmontreal\\ncarrie\\n1babygirl\\n12345qwe\\nsugar\\nhottie101\\n3d8Cubaj2E\\nserenity1\\nrocker\\ngagged\\nw1989a\\npoppy1\\nbatista\\nkaktus\\nantonia\\nmarcelo\\n224466\\nyolanda\\nbillabong1\\n1q2w3e4r5\\n1qwert\\nspike\\nsidney\\nPolniyPizdec1102\\nqwerty6\\ngoddess\\nleslie1\\nkarolina\\nthumper1\\n9\\ne10adc3949ba59abbe56e057f20f883e\\nqqqqqq1\\ncme2012\\nmustafa\\n19971997\\njulia1\\ngibson1\\nzxasqw12\\nthegame\\ndillon\\ntimmy1\\nrespect\\nbaseball5\\nsophia1\\nchampion1\\nblack123\\naobo2010\\n1979\\nrosemary\\n12qwas\\nscrappy1\\nrocky123\\nhighheel\\neastside1\\nmonkey22\\ngemini1\\nqwe123qwe\\nzxcvbn1\\nnick123\\ncynthia1\\nasdf3423\\nsublime1\\nmoose1\\njose123\\nw1982a\\ndenis\\n225588\\nfernando1\\ndiana1\\nlilly1\\ndesiree\\n19771977\\niceman1\\nmyspace11\\noceane\\njellybean1\\npreston1\\nbobbob\\n369852\\nsoccer22\\ncorona\\nindiana\\nblazer\\nsara\\nghetto1\\n8\\nmartini\\nw1988a\\nmaximus1\\naxio\\n4321\\ngalaxy\\nbeatles1\\nawful\\nsharon1\\njay123\\nhongkong\\nwindows1\\nhakr\\nмаксим\\nmarisa\\nbluesky\\nnicole123\\n123567\\nmarianna\\njajaja\\nmister\\npatriots\\nmommy\\nacmilan\\nfuck12\\nhendrix\\ngothic\\nsparkle\\n19731973\\njesucristo\\nlaurent\\nw1984a\\nallah1\\nredneck\\nskolko\\nlovelove1\\nbigred\\nbabygirl13\\nsoccer8\\naztnm\\npyon\\napollo13\\nfiesta\\niloveyou14\\nsentnece\\nw1986a\\nnichole1\\n123love\\nr\\nmilena\\nfaggot1\\n123456789123456789\\nfootball11\\nhannah123\\nmarilyn\\ndominik\\ntelephone\\nbudlight\\nTempPassWord\\nmonkey5\\nstinky1\\naol123\\n123456as\\ngerald\\n123456v\\n777\\nsommer\\nkaitlyn1\\nleonard\\njulie1\\n1234qwe\\nskywalker\\nw1983a\\nroxanne\\nMichael\\n1234abc\\nfuckyou3\\nwonderful\\nrockon1\\njessica123\\nAKAX89Wn\\n23232323\\nqwertyuio\\nradio\\njordan123\\nfreckles\\nguadalupe\\npamela1\\nbubblegum\\noblivion\\nasshole2\\nangelica1\\nteresa1\\nivanov\\nesmeralda\\ndeftones\\nlionking\\nfondoom\\nblackjack\\nmonday1\\nrevolution\\nretard1\\npurple123\\ngalatasaray\\n12345678q\\ndollar\\nherman\\ncomeon11\\ntyler123\\n12345g\\nradiohead\\nzxcvbnm,\\nyahoo123\\ntruelove1\\npuppies1\\nskate\\nrocknroll\\nlkjhgfdsa\\nfebruary\\nnewport\\nalfredo\\nsonic1\\njeanne\\nhallo1\\neric\\nlinkedin123\\nirina\\ntasha1\\nrussell1\\nw1987a\\ngabriele\\nw1975a\\nclassof09\\n123456789b\\nbrazil\\nhayley\\nredrose\\ncorvette1\\nh\\nteamo1\\nvfhecz\\nmichal\\n1991\\nbigred1\\nsexy14\\nwhore1\\nfrederic\\nmakaveli\\ndkflbvbh\\nfucklove\\nballer23\\nhandball\\nsoccer17\\nhi\\nrobbie1\\nnintendo1\\nmommy2\\namerica10\\njanuary1\\nflipper\\n1981\\nmotherlode\\nhayden1\\na801016\\njust4me\\nangelina1\\nmetal666\\ncartman\\nanthony2\\narturo\\npassword21\\ngarrett1\\nphone\\nstarfish\\nspiderman2\\nnewton\\nlove17\\nmoney$\\nhappy2\\nmax\\npoison\\npegasus\\nholden\\ndetroit\\n88888\\nzxzxzx\\ncaitlin1\\nabcdefghij\\nsarah123\\nbirdie\\nredhead\\n1990\\nartist\\njustin123\\npaintball\\nanything\\niloveyou4\\nprincess11\\nsunshine2\\n1020304050\\ny6p67FtrqJ\\ndanilo\\nprincess13\\nlarry1\\n1zn6FpN01x\\nmissy\\nkolobok\\nlogitech1\\nderrick1\\nreddog\\npinkfloyd\\ngod\\nstarcraft\\nsnowflake\\nchico1\\nflying\\ncasey\\nstardust\\npaige1\\ngizmo\\nncc1701d\\nprivate1\\nnewcastle1\\ncassidy\\nfootball9\\nautumn1\\nsantana\\nash123\\n1122\\nhawaii1\\nbluemoon\\n1977\\nvladik\\nrodriguez\\nq123456789\\nw1981a\\nlasvegas1\\nbaby11\\nbettyboop\\njason123\\nblueeyes\\neducation\\nblowme\\njojo\\nw1978a\\n1b78ef23aa2506f41feecfcc45b66038\\nsmallville\\ndietcoke\\nblossom\\n4\\nsavage\\ntoulouse\\nramona\\ndaddy123\\ntattoo\\n987987\\ncracker\\nclassic\\njojo123\\n111213\\nrock\\nirish1\\n1a2s3d4f\\nmy2kids\\nskeeter\\nblonde\\nlolo\\njumpman23\\nlaptop\\nhornet\\ntrigger\\nfamily4\\npancho\\nmoloko\\nbroken\\nsnowboard\\ncollege1\\nblueberry\\noutlaw\\nblake1\\nfireman1\\n19741974\\nktyjxrf\\nflamingo\\nstephane\\nfireman\\nelodie\\nmilan\\nphantom1\\nfootball3\\nbrown1\\nkissmyass1\\nvfksirf\\nriccardo\\nallen1\\nsurfing\\ntony\\nilovehim\\nrooney\\nhomer1\\n1978\\ndrowssap1\\ndoggie1\\nblaze1\\nkingston\\nmegaman\\neleven11\\nanamaria\\nmunchkin\\nmichael123\\nmarlon\\nmitchell1\\nhannah12\\ndetroit1\\ngiovanna\\niloveyou5\\nnascar1\\nreggie1\\nmichaela\\nw1976a\\nmiamor\\nlarissa\\nw1977a\\nlisa\\nanderson1\\nwicked\\nwwe123\\nincubus\\nLinkedIn\\njoejoe\\nandre\\n25252525\\nlighthouse\\n5hsU75kpoT\\nsingapore\\nkatrina1\\nweed\\nrocker1\\njester\\njoker\\ndiablo2\\nsuzanne\\nstormy\\nlucas1\\n808080\\n424242\\ntwinkle\\n123456qw\\nsoledad\\naleksandra\\ncarlitos\\n123456ab\\nschatz\\njustin12\\ngabriella\\nuniversal\\n1a2b3c4d5e\\n415263\\ndaniela1\\nfelix\\nariana\\n5\\neeyore\\nbrandi\\nquentin\\npinky\\nsexy01\\ncashmoney\\npurple2\\nnuttertools\\nrayray1\\nragnarok\\nrastaman\\nrebelde1\\nrrrrrr\\ngolf\\nlabrador\\njonas1\\nmy2boys\\nholiday1\\ncookie12\\nroscoe\\nmexico13\\nwarcraft3\\n147741\\ntechno\\nghost1\\ncallum\\nunited1\\nblizzard\\nbaxter1\\nhamster1\\nadriana1\\n1a1a1a\\ndelpiero\\ncheese123\\nrocket1\\nandre1\\nsassy\\n200000\\nhalo123\\ngonzalez\\nbritney1\\nextreme\\nmoreno\\nhottie12\\n258963\\nredrum\\npepsi\\nlakshmi\\nthankyou\\n1234568\\ncatfish\\njesus12\\nyomama\\nprincess3\\nlove12345\\nmyspace13\\nlover12\\nnaughty1\\nbraves\\ngodfather\\nangel11\\nq\\nstars\\nromashka\\nmarijuana\\ndiablo1\\nvalerie1\\ncoolio\\nmelvin\\ndoodle\\nqwertyuio1\\nfootball5\\nilove\\ndisturbed1\\nhaley1\\nibanez\\njayson\\nprincess!\\nf00tball\\nrichie\\nfrancis1\\nhobbit\\n162534\\ncoco\\n23456789\\npalermo\\nmy\\nfisher\\nchocolate2\\npizza123\\ngriffin\\n123456qq\\nwalter1\\ndusty1\\nsexybitch\\ngladiator\\nyankee1\\nrbhbkk\\nhehehe\\nzaqxsw\\nxiang123456\\nvfrcbvrf\\nlogan\\nbabygirl10\\niforgot\\ngirls\\nz1x2c3\\ncindy1\\naaaa1111\\n1234569\\nclement\\n1angel\\nskorpion\\nbastard\\nunicorn1\\nskate123\\nprincess7\\nernesto\\nsouthpark1\\nlancer\\ncrazy123\\n134679852\\nfranklin1\\nlove33\\n#1bitch\\nsummer06\\nphilippe\\nd71lWz9zjS\\nrandy1\\ndrjynfrnt\\ncassidy1\\nbishop\\n789654123\\nkevin123\\nclover\\nunknown\\ngoldfish1\\ngbpltw\\nfatcat\\nbscirc\\nsnuggles\\namorcito\\npanget\\ndorothy\\ndeniska\\ncougar\\nmackenzie\\nhouse1\\ngoodboy\\namelie\\n2cool4u\\nresearch\\nbabyblue1\\nlibertad\\ncharlie2\\nblackcat\\nbitch!\\nbethany1\\ncarson\\nannette\\nasddsa\\ntootsie\\npotato\\nbuttons1\\nfrancois\\nfelicia\\nflower123\\nboogie1\\n1992\\nvfvekz\\n1230123\\nphillip1\\nsunshine12\\npimp101\\nmerlin1\\ndonald1\\nsoccer21\\nmonkey!\\ncantik\\ncalvin1\\nsvetik\\npower123\\nmobile\\ndeedee1\\ncasino\\nasterix\\nisaiah\\npasswort1\\nkaitlyn\\noffice\\nxyz123\\ndiego\\npisces\\nkatana\\nhunting1\\nsooners1\\nindigo\\nesteban\\nazsxdc\\naragorn\\n12345678900\\nrobinson\\nf:\\ndiesel1\\n794613\\nvirginia1\\nbernie\\nbaseball13\\nhabibi\\n787898\\ndixie1\\nboobs\\nwarriors\\nskippy1\\nmarlene\\nsaints1\\nmessi10\\nhitler\\nsmith\\nthegame1\\ncuddles1\\nQwerty\\nnicolas1\\ngiants1\\njessica2\\nevolution\\nhawaii50\\nmyspace5\\narmani\\nzeppelin\\ntrinidad\\nangel01\\ntdutybq\\ng\\n556677\\nbiscuit\\nbillybob\\natlantis\\n1598753\\nwoaini1314\\npompier\\nmamamama\\nhottie123\\nunreal\\nwestham\\n33333\\nclifford\\nmalika\\nnokia1\\nsoccer6\\nlonely1\\nrhfcjnrf\\nfreaky1\\nhelene\\nbabies\\ntatyana\\nservice\\nwordpass1\\nshelly1\\nmary\\njavier1\\nfoxpass\\n1976\\nbelieve\\nagnieszka\\nolga\\nverbatim\\nfire\\ndave\\nqwertyqwerty\\nkaylee\\ndinamo\\ndthjybrf\\nmaxine\\n6543210\\ncaptain1\\nsexyboy1\\nмарина\\nihateyou2\\nfarfalla\\nnatalia1\\nviper1\\npanzer\\nalexia\\nhanuman\\nprincess01\\nshadow2\\nscruffy\\n123456789c\\ncalimero\\n1975\\npimp69\\nhearts1\\nlupita\\njake123\\nilovemymom\\nraptor\\nmoney6\\njenna1\\ncharlie123\\nhottie2\\na23456\\nrenata\\nanimals\\nsoccer16\\npaulina\\nchemistry\\ncactus\\nred\\nangel3\\n120120\\ngolfer1\\nraquel\\nmauricio\\nmotocross\\ndaisy123\\ncannabis\\nimmortal\\nguest\\ncolorado1\\nbabyboo1\\njojojo\\napplepie\\nmegane\\npotter1\\nmarvin1\\npaul\\ncadillac\\nplaystation\\nchristy\\n)\\nlosangeles\\nfenerbahce\\n24682468\\ncheval\\nyoutube\\nbreanna1\\nalladin79\\njeremiah1\\narschloch\\nrajesh\\nenter\\nmnbvcxz1\\nbryan1\\nmomdad\\nchipper\\nalenka\\ntarget\\nnicole2\\nsabine\\nsemperfi\\niw14Fi9jxL\\nnutella\\nalibaba\\nisaiah1\\nangeles\\nvodafone\\ntttttt\\nelvis\\nYfDbUfNjH10305070\\nblue1234\\nandreea\\nindiana1\\nvitalik\\nryan123\\nmarie123\\nsavage1\\nmonitor\\namerican1\\nmanutd1\\npeter123\\n1million\\nchubby\\nkingkong1\\nrambler\\nfavour\\nerica1\\nlouloute\\ncarebear1\\nmalina\\nmykids\\nc43qpul5RZ\\npussy123\\nheyhey\\njustinbieber\\n001122\\nqqqqq1\\nhenry\\nelizabeth2\\nrodney\\nb9399f21060d4b5fcb6d3cf5fea8de\\n12345671\\ngodbless\\nfuckyou7\\nkaiser\\nsummer12\\nfuckoff!\\nswimming1\\nl12345\\nmetal1\\n123456789r\\nsouthside\\nxxxxxxxx\\n1andonly\\nmarcela\\nlavender\\nlacrosse1\\nimissyou\\nsarita\\nericsson\\nstreet\\nscarlet\\njustme1\\naspire\\nturkey1\\nlightning\\ncassandra1\\nheckfy\\nivan\\nsally1\\ndima\\napache\\nfalcons1\\nsoccer23\\n19981998\\nsweetness\\ningrid\\neclipse1\\nkaren\\n159632\\nsheena\\nqwert6\\ntrooper\\naleksey\\nfamily6\\nlaurence\\nchantal\\nsmudge\\nrenault\\nchrissy1\\nmastermind\\ncoco123\\nyamahar1\\nosiris\\ndog\\nwinnie1\\ntwister\\nerika\\npatata\\nderrick\\nfelix1\\nchipie\\npapamama\\nblonde1\\nlayouts1\\nspartan\\nkristin1\\nqwertyu1\\nnelson1\\njordan2\\ngames\\nnevermind\\nfelicidade\\n1993\\n676767\\nhalloween\\ndude123\\nH2vWDuBjX4\\nwesley1\\nnissan1\\nwildcat\\nkickass\\nfather1\\n12345p\\nalberto1\\n1a2s3d\\namandine\\nkennedy1\\ndalton\\nabhishek\\n000123\\npriyanka\\nlovehurts1\\nI\\nwolfgang\\ncellphone1\\nsampson\\nfriends2\\nwonder\\nkittykat\\nlover2\\nmusique\\ngoober1\\n543210\\nscruffy1\\nkristine\\nnugget\\nsprite\\nmaster12\\nzxcasdqwe\\naugust1\\nletmein2\\ndanny123\\nmorrison\\nlollypop1\\nvladislav\\nvRbGQnS997\\n963258\\nfreak1\\naustin316\\naliali\\nкристина\\nmexican\\nfalcon1\\nr12345\\ncolleen\\nsurfing1\\nfacebook1\\niamthebest\\nmarina1\\neduardo1\\ndingdong\\nkarina1\\ngunner1\\nheart1\\nSKIFFY\\nsexy15\\nmission\\nhot123\\nbrandi1\\nali123\\nmakayla1\\nsweetness1\\nsandiego\\nluciano\\n1994\\njanine\\nhunter12\\ngodisgreat\\nsanjay\\nallstar1\\njackass2\\nfootball21\\nblackie1\\nmamma\\nqwert12\\nchevrolet\\nhernandez1\\nemanuel\\ndamian1\\nfallen1\\nskipper1\\ncaramelo\\nwhite1\\nloveless\\n123456A\\ncheryl\\nblue11\\nharvey1\\n2468\\nbatista1\\nmyspace01\\ngerrard8\\nabraham\\njessica12\\nmatias\\nbruno1\\n345678\\n1974\\nronaldo1\\nnightmare1\\ncoyote\\n1000000\\ncorona1\\nmouse\\nlittleman1\\nsurfer1\\nbackspace\\nmeghan\\ncat\\nfuckthis1\\nchichi1\\nxxxxx\\n??????????\\n11\\nkiller2\\ndevin1\\nnaughty\\njacqueline\\nwarhammer\\n1family\\nchrissy\\nanastasiya\\ncristiano\\njerry\\njersey\\nkathryn\\nboo123\\ncamaro1\\nmaestro\\nhello1234\\nmadonna1\\nmirage\\na654321\\nwachtwoord\\n19721972\\nsouthpark\\njoseluis\\nspongebob2\\nplaya1\\nashton1\\nqazwsxedc123\\ndivine\\nstarlight\\nshadow13\\nprojectsadminx\\ncounter\\nwatson\\n258852\\namadeus\\njakarta\\nchina1\\nmotorola1\\nbowling\\nwoody1\\nchicken2\\nscrappy\\nsk8board\\nsandman\\nuniverse\\npwd1234\\npolaris\\nkaylee1\\naction\\n******\\nkristina1\\n963963\\nlincoln1\\nroute66\\npassword14\\nx4ivygA51F\\ncorey1\\nsexylady1\\nwedding\\nromeo\\ninlove1\\nmiami305\\ndarwin\\nscotland1\\ns8YLPe9jDPvYM\\ndirtbike1\\nrusty\\nmichael12\\nfootball22\\nbullet1\\npearljam\\nnokia6300\\nbabygirl3\\npassword1234\\nciao\\nskeeter1\\nnathaniel\\nfatty1\\nhunting\\nclayton\\nvictory1\\ninsane\\nvoyager\\niloveyou123\\nraphael\\noscar123\\nlove4u\\nfucku\\nvioleta\\ninter\\nharris\\n1973\\nloser12\\nmathieu\\ngranny1\\nclassof08\\na1a2a3a4\\nlilman1\\ncuteako\\nvanille\\nmonkey69\\nt12345\\nm123456789\\nchrisbrown\\njG3h4HFn\\nkramer\\ndiamonds1\\nlennon\\njungle\\nstewart\\nnnnnnn\\n123456789t\\n123450\\npeace123\\nfriday13\\nсолнышко\\nironman1\\nasdfgh123\\nandrew12\\naudia4\\nvb\\netoile\\nsirius\\nlucas123\\nlester\\nredred\\nplatinum1\\nmathilde\\nанастасия\\njoey\\nmoney5\\nmaurice1\\ncontrol\\n112112\\npowers\\nnorton\\ngerard1\\nmanolo\\nclaude\\npornstar\\nblue42\\nrooster1\\nmama12\\nmomdad1\\nkotenok\\n123qwer\\nopensesame\\n1995\\nандрей\\nsniper1\\nhotgirl1\\nqqqqqqq\\nmicrolab\\n121212a\\nchange1\\n123456x\\npoisson\\nplayer69\\nhouse\\nmicrosoft1\\ncurtis1\\nhector1\\n12345e\\niloveu123\\nteam\\nmichele1\\nbruno\\nangel5\\nmermaid\\nmarika\\njasmin1\\nABC123\\n153624\\nsoulmate\\nmarta\\nuniversity\\nfrosty\\nnancy1\\nfranky\\nenter1\\nalgerie\\ntoshiba1\\ndallas214\\nsimba\\nab123456\\nvoiture\\nmathew\\ncampbell\\n123456.\\npothead1\\njosh123\\ndevils\\nkenshin\\nsampson1\\nnoodles\\nlondon12\\ninlove\\nallstar\\npass1word\\nmotherfucker\\n18atcskD2W\\noxford\\nmike12\\ninferno\\n135791\\ncinnamon\\nmoimoi\\nmendoza\\nstars1\\n12345f\\nmonamour\\nemilia\\nxxxx\\nfutbol\\nemilio\\ncoolman\\n2005\\nkrystal1\\ndante1\\nchevelle\\nverizon1\\nsoldier\\n0102030405\\nempire\\ncarole\\n132456\\nsexy23\\nlestat\\ndominique1\\ngreen12\\neleonora\\ntheking1\\nmyspace4\\naccount\\nnigeria\\nfktrcfylhf\\nchris2\\nfree\\nhudson\\nana123\\nhappy12\\ntacobell1\\n357159\\nwhat\\nasdfghjkl;&#39;\\nslimshady\\nscotty1\\ntony123\\nredhead1\\n584520\\nsalope\\nlovelife1\\nziggy1\\nsherlock\\n1969\\nkamila\\n111112\\nwindow\\n19071907\\ntomato\\ndalejr8\\nsandro\\nmaman\\njillian\\n000007\\nmushroom\\nfighter\\npeanuts\\nw66YRyBgRa\\ndwade3\\ndesire\\ntopolino\\ncomputer12\\nbetty1\\nwebhompass\\nglobal\\nceltic1\\nrichmond\\nr2d2c3po\\nhell666\\nbhbirf\\npanama\\nbatman123\\nmichelle12\\nmadman\\nloveme12\\nanjali\\nyugioh\\nchiquita\\nrosita\\nplacebo\\nbooty1\\nchamp1\\n474747\\nvirgin\\n12345abcde\\ntigger12\\npiglet1\\nherbert\\nsergei\\nangel10\\nseattle\\nAa123456\\nalina\\nproject1\\nregina1\\nlakers8\\nkiki\\nwhynot\\nviewsonic\\nrctybz\\nnature\\nfreddie1\\nbaseball9\\n12345678901\\nqqwwee\\nParola12\\nhermione\\nashley2\\ndeepak\\ngloria1\\npresident\\ncotton\\nannie\\ndoggy\\nasd456\\ncookie2\\ndedewang\\nrolltide1\\npuppy\\nqweasdzxc123\\ngorgeous\\nninja\\ngraham\\ng13916055158\\namanda123\\n3girls\\nsucker\\nX3LUym2MMJ\\ndracula\\nvirginie\\nfirefly\\nmookie1\\n1230\\npraise\\njuancarlos\\nwebster\\nmarathon\\nmimi\\ncoolio1\\nandrew123\\nbabylove1\\n636363\\n2sexy4u\\nlove45\\nlacoste\\nsnake1\\njerome1\\nmorgane\\ngirls1\\ndudley\\nzxcvb1\\nhorse\\ngranny\\nbaby01\\nromance\\nbaseball8\\nhobbes\\nkyle\\nbaker3\\nsnowflake1\\nmartha1\\nbigman\\ntottenham1\\npedro\\nbobcat\\ndanila\\nILOVEYOU\\nalfaromeo\\nwalker1\\nnellie\\nisabel1\\n741258\\nrebelde\\n20002000\\nkatie123\\nsylvia\\nklaster\\nkamikaze\\nalvaro\\ndragon2\\nsinger1\\nbonjovi\\ntheking\\ninsane1\\nfarmer\\nsherry\\npirates\\njuggalo\\nasdqwe\\n321321321\\nnickjonas1\\n1qaz\\nboomboom\\nlillian\\ntuning\\nvfvfgfgf\\nmexico123\\nkitkat1\\nlove123456\\nhellohello\\nznt:\\nlawyer\\nrock123\\nbitch101\\nblood\\nPassword123\\ncatfish1\\ntaekwondo\\ndolores\\nanthony123\\n1Fr2rfq7xL\\nraider1\\nkeyboard\\nfrancisco1\\nsnowboard1\\ntrucker1\\npolska1\\nsimone1\\nlaetitia\\nyousuck\\nclaire1\\n123ewq\\njames007\\nhappiness1\\namber123\\njames12\\npunkin\\nholahola\\nbabyface\\nsummer123\\nleo123\\ndeathnote\\nlizzie1\\n1234567890-\\nattila\\nwolverine1\\npentium\\nbrendan\\nsonia\\nqqq123\\ndarren1\\n123aaa\\njuliet\\njuanito\\nprofessional\\nghetto\\ninside\\n852963\\nroberto1\\nwendy1\\nhello11\\ntrisha\\nnoodle\\nmanman1\\nkeith1\\nbrittney1\\nrayray\\nloving1\\ndumbass\\nchosen1\\nassass\\nzxcvb\\nfuck11\\nterry1\\nspunky\\nmaroon5\\ntimber\\neddie\\n757575\\njefferson\\nsailor\\nmammamia\\nmartine\\nfoster\\nvanilla1\\nsandeep\\nmalcolm\\nemo123\\n2323\\nraider\\nheart\\ndesiree1\\nsayang1\\npatience\\nmarisol\\nasdfgh12\\n11221122\\nvfczyz\\nman123\\nsasha123\\nnana\\nfuckoff2\\nv123456\\ndiosesamor\\nadriano\\nestrella1\\nchevy\\nqwe321\\nhistory\\nblah123\\nraven\\nmisiek\\nalisha\\nsweet123\\nsnoopy2\\nTelechargement\\nsexy21\\nman\\ncollins\\ncartman1\\nharrison1\\nbelinda\\nmylife1\\nfamilyguy1\\nyasmine\\nwalmart1\\ndating\\ngarcia1\\nmisty\\nelisabeth\\ne\\nsteph\\ncarebear\\nazsxdcfv\\nrose123\\n......\\ntitans\\nphilly1\\nmate1\\ncutie12\\nluckydog\\npassword99\\npingpong\\nkenny\\nreaper\\nwow123\\nbobby123\\nkokoko\\ntaytay1\\nkinder\\ncosmos\\nqwertyuiop123\\nhummer1\\n369963\\ncastillo\\nkathleen1\\npriscilla\\nmatt123\\ngianni\\nshaggy1\\nkillbill\\n8888888888\\n111333\\nqweqwe123\\nfilippo\\n12345654321\\nbadgirl1\\nbabygirl11\\niloveyou8\\n2girls\\nstacey1\\nkelvin\\nfigaro\\nbleach\\ndan123\\nandres1\\npenny\\ngianluca\\na123456a\\nanubis\\nvvvvvv\\nvietnam\\njeff\\n969696\\nandy\\nwombat\\nwhiskey\\nonepiece\\ncarina\\nangel101\\nntktajy\\nstar69\\nbridget\\niloveyou10\\nbecky1\\nbonita1\\ntrabajo\\nd9Zufqd92N\\ncaesar\\nultimate\\nsummertime\\nfussball\\njacob123\\nunique\\nparadise1\\nlilian\\ntester\\ndodge1\\n686868\\njohnjohn\\ntaylor12\\nlove25\\nsakura1\\npoop11\\nmartinez1\\nparty1\\nsparkle1\\nbeyonce\\nhunter123\\nmario123\\ncaleb1\\nwolves1\\nbutterfly7\\nmaiden\\np4ssw0rd\\nmonaco\\nchicco\\n464646\\ncindy\\nbronco\\nabcd12\\nsoccer!\\namanda12\\nalex13\\npastor\\nmoose\\njesus2\\njobsearch\\n1qazwsx\\nmarijuana1\\nalpha\\n66666\\nsyncmaster\\nlandon\\nfuckyou13\\nbuster123\\nlena\\nsquirrel\\nmargot\\nyoubye123\\nmaureen\\nseven\\nbeast1\\njohn12\\ngeneral1\\nbaby14\\npapa\\nnikolay\\nrfhbyf\\noakland1\\nconverse\\niloveu!\\n3children\\nviper\\nnounours\\nbig\\nfriday1\\nbabycakes\\nhoney123\\nnichole\\nairforce\\n01234567\\nlove88\\nlove19\\nsexy10\\nnewpass\\nchurch1\\nblueberry1\\nodessa\\ntheresa1\\nemma\\nemily123\\n???????\\ncucciolo\\n19691969\\nshiloh\\ndragon13\\nsalome\\nelvira\\nshane\\nnascar24\\ndiscovery\\ndarkside\\nvolume\\nrobin\\nlandon1\\nsuckmydick\\nmiami1\\nrobin1\\nlovers2\\nbehappy\\nangel14\\namazing\\njenny123\\npink11\\nlee123\\nronald1\\nlove77\\nanita\\nyellow12\\n8888888\\nilovemusic\\nannabelle\\nadgjmp\\n1972\\ndfkthbz\\n1357911\\nbeyonce1\\nmittens\\nfallen\\nv\\nashleigh\\nlove20\\nhorny\\nsolnce\\nDaniel\\n369852147\\nbenny1\\nhayley1\\nboots1\\nstuart\\nbball23\\nnetworking\\nhamlet\\nkathy1\\nabcdef123\\nking12\\n24681012\\nselena1\\nz12345\\nsummer11\\nforgot\\nnewjob\\nhomer\\ndiego1\\nmackenzie1\\njuanita\\nhuhbbhzu78\\ndownload\\n555777\\nsparta\\nnational\\n69camaro\\nilovegod1\\nwolf\\ndesigner\\nguillaume\\nbusiness1\\nmelina\\niloveher1\\nalfonso\\nsocrates\\nshutup\\nasshole123\\nsoccer18\\nbuffalo1\\ndevil\\nchargers\\n1truelove\\nsexy16\\n2121\\nrochelle\\nstudent1\\ndanger1\\nhotrod1\\nvoyager1\\nalice1\\nnokia123\\nqweewq\\nQwerty123\\ngodisgood1\\nsoftball12\\namerika\\nj123456789\\ncooldude1\\n999666\\ncheese12\\nbigman1\\ndmitriy\\nsalman\\nbackspace1\\nrachael\\npupsik\\nkasper\\nsissy1\\nnopassword\\nabdullah\\n87654321q\\nprayer\\nhellfire\\nvalentine1\\ncatcat\\nderek1\\nkiss\\ndomenico\\nkristi\\nleticia\\nrenegade\\npikachu1\\npayton\\nhihihi1\\nabracadabra\\n20012001\\nramirez\\ntrixie1\\nnounou\\ndemon1\\nricky\\njuicy1\\nhello5\\nlucy\\nharmony1\\n741963\\ntarheels\\nleelee\\n634142554\\n123mudar\\nrfn.if\\nchandler1\\nhendrix1\\nlourdes\\nblowjob\\n8ix6S1fceH\\npackers4\\ngratis\\nbillybob1\\nlionel\\n101112\\nqwertyuiop1\\nfxzZ75\\nstoner420\\nmemory\\nmahal\\nmaxima\\nwerewolf\\nwolfpack\\nmurray\\nfreaky\\nlove4life\\nholden1\\njohannes\\nqweasd1\\nlaurie\\n123456o\\ntigger123\\nM\\nplayboy69\\nsofia\\njeffhardy1\\nhitman1\\nblue32\\nvegeta1\\nbrandon2\\n1996\\ngsxr1000\\nwestern\\nangie\\nqwegta13091990\\npurple7\\nneopets12\\nmy3girls\\nfaithful\\n12qw34er\\nloveu1\\neeeeee\\ncfitymrf\\nflamengo\\ncaterina\\nbaseball4\\nwestham1\\njocelyn\\nisland\\nkendall\\nfootball23\\nbrucelee\\n123456789n\\nbowwow\\ntelefono\\nairborne\\nmemphis\\nsadie\\ncandy12\\nkakashi\\nsmile4me\\n741741\\nbabylon5\\nomarion1\\noracle\\nbuster12\\naqwzsx\\n014789\\n515151\\nzxcv123\\nsmart1\\nmarcin\\njesuschris\\n3333333333\\ncheater\\nmaximilian\\ndebora\\namazing1\\nattitude\\nmikey\\nunivers2l\\nshadow11\\nmelinda\\n6\\nmyspace10\\nlilly\\njazmin\\nshutup1\\nsantiago1\\nfantasy1\\nmattia\\ncharity\\nz k.:\\npiggy1\\nsexy22\\nmillion\\n25251325\\n15426378\\nbentley1\\nnancy\\nchargers21\\nestrellita\\nprimavera\\ndeadman\\ntreasure\\nroger1\\n878787\\nlorenzo1\\nalonso\\nsoldier1\\nrambo1\\nelliott\\ntrigger1\\nmersedes\\neagle\\nbitch13\\nokokok\\nmilagros\\nbasket1\\nbeach1\\nsailing\\nwater123\\nsergio1\\nbubbles2\\nmargaret1\\nxxx123\\nsamsung123\\nnokian73\\n1q2w3e4r5t6y7u\\nleanne\\nyellow123\\nfernandez\\nanthony12\\nsevilla\\nq1q2q3\\nkrystal\\ndarius\\nhttp\\ndoberman\\nkittens\\ncallie1\\nboobs1\\n555\\nsesame\\nkingdom1\\nsummer10\\nsonic\\n4runner\\nolamide\\nfuckfuck\\ncoldplay\\nmatematica\\nsascha\\ncecile\\nyellow2\\npink13\\nclayton1\\nanaconda\\nqweasdzxc1\\nalaska1\\nme1234\\nwelcome2\\ngodzilla1\\nwhocares\\nkickass1\\nkatelyn1\\nramses\\ngerardo\\ndigimon\\n10203\\ntonton\\nfelicidad\\n172839\\nmiley1\\nbillie\\n666666a\\n19701970\\nasdfg12345\\n987321\\nfuckyou666\\ndawson\\ndamilola\\nlegend1\\nangel22\\nprincess5\\nsandiego1\\nadmin1\\nfitness\\nmyname1\\nanime1\\nangelika\\nsexylady\\ncrazy8\\n6666666666\\n123456789g\\nloveya1\\ngodfather1\\ncareer\\nzxcasd\\nilovemom1\\nballet\\nsnake\\nbangladesh\\ntyrone\\nj:\\nromania\\n1234qw\\ngoldie1\\nrfrnec\\nlayout1\\nmarco1\\nchanel1\\nramones\\nwhite\\ndream\\nnascar88\\nsexybeast1\\npresario\\nhooters\\nmohammad\\njoshua12\\ndragonfly1\\ndancing\\npencil1\\nnamaste\\nspooky1\\np@ssword\\nbastard1\\nomega1\\njohndeere\\nass\\npedro1\\nporkchop\\nredman\\nschool123\\neileen\\naditya\\nprodigy\\nfootball13\\naudrey1\\n125125\\n040404\\npoland\\nl1nk3d1n\\nbaseball22\\ndonna1\\nashlee\\n456\\nmoneymaker\\nmariposa1\\nsharks\\njames2\\nfytxrf\\ncristo\\nbitchy1\\nbabyphat1\\niforgot1\\n110120\\nscience\\ndodger\\nloveya\\nlala12\\nlondon123\\neastside\\n1qaz!QAZ\\ntester1\\ndan\\nbeckham7\\nflames\\ncentral\\nspirit1\\nmountain1\\n333\\ngeraldine\\n1231234\\nvfhufhbnf\\nromano\\nmessenger\\n1football\\npapito\\nkatrin\\nbigboss\\npuertorico\\nmichelle2\\nlove99\\n999888\\nkiller7\\ndfktynbyf\\nbomber\\nsally\\nilove69\\nganesha\\nmusicman\\ndenver1\\nmichael7\\nsherman\\njared1\\ncastle\\n5150\\nsayangku\\n858585\\nvelvet\\nthomas12\\nflower12\\nbatman12\\nflash1\\nerica\\nsenha123\\nrainbow6\\n000999\\nmamour\\nbeavis\\nkendra1\\nmegadeth\\nexcalibur\\nmississippi\\npeyton\\nnana123\\nsonny1\\nalways1\\ntimmy\\nknight1\\nrodney1\\nasd12345\\n9876543\\n2112\\nviktoriya\\npacman\\n12345w\\nалександр\\nyfnfkmz\\nkicker\\ninformation\\nganteng\\nangelo1\\nyoyo\\ntammy1\\nlove00\\narmagedon\\ngunit1\\n852852\\nsnuggles1\\nilaria\\nelliot\\ncarrie1\\nexpress\\n616161\\nybrjkfq\\nsunday1\\npoppy\\nabc123abc\\ntexas\\nfreestyle\\nsecurity1\\nhamburg\\n147963\\nzzzzzzz\\njose\\nshirley1\\nlampard\\nkakashka\\nfuckyou22\\nharrypotte\\ndandan\\nbadgirl\\nqwedsa\\nbigfoot\\nlove06\\nemerson\\njohndeere1\\ndavid12\\nzxcvbnm12\\n159263\\ntyrone1\\n13243546\\nlove2010\\nelefante\\niloveme!\\n131421\\nq1234567\\n12345h\\nwildcat1\\ndoraemon\\nbitchass1\\n01230123\\narthur1\\nbuckeyes\\nalexandr\\nmomma1\\n2fast4u\\nroadrunner\\ndarkstar\\np0o9i8u7\\ninternational\\nbaby1234\\ntesting123\\nshooter\\nhome\\ncheetah\\ntrumpet1\\nsatellite\\nmississipp\\ngoblue\\ngatito\\nprincesita\\niloveyou69\\ngatita\\nhouston713\\nfabiola\\nchicken123\\ncristal\\nangelique\\n112233a\\nmoscow\\nlexmark\\nfucking1\\nethan\\nchronic\\n575757\\nmoneyman1\\nbrittney\\nballs\\njoker123\\nbooboo2\\nmilton\\nnelly1\\nmihail\\nstrong\\nilovemyself\\nscvMOFAS79\\nbushido\\nbrutus1\\nsailormoon\\nlalalala\\n113113\\nnewman\\nmarjorie\\nteamo123\\nrodriguez1\\nadam12\\nsmiles1\\n1z2x3c\\nilikepie\\ncheer\\npussycat1\\ngerrard\\njoanna1\\ntrunks\\nsoccer09\\ngoodgirl\\n535353\\nbabyface1\\nOmni\\nsundance\\nsoccer101\\nвиктория\\nscorpion1\\npontiac\\nbriana1\\nbaby23\\nsexy1234\\namarillo\\nenrico\\n.adgjm\\ncardinal\\nanything1\\nmama1234\\nairplane\\nangelbaby1\\nanakin\\nhoneybee\\nhollister2\\nsteaua\\nhome0401\\ntacobell\\nashlee1\\nrommel\\nkisskiss\\njersey1\\njustin2\\nhottie!\\n122112\\nshasta\\nghost\\ndublin\\nsummer69\\ndelta1\\nimagine\\npirate1\\nmonty1\\ncar123\\nace123\\ncardinals1\\ntootsie1\\nnorman1\\n20202020\\nquincy\\npoppop\\nparamore1\\niloveme123\\nbryan\\nkarachi\\ndecember12\\nalinka\\nqwerty13\\nspartan1\\ngladys\\nthomas123\\nmyspace08\\nluis123\\nlobster\\nkendall1\\nnintendo64\\nnathaniel1\\nmine\\nchelsea123\\nlola\\ndomino1\\nrunner1\\njordan11\\nbeverly\\nbusted1\\nmoney23\\nletmein123\\nevangelion\\nenglish1\\nalexandru\\n414141\\nilovejusti\\nyfcntymrf\\nmegasecret\\nmateusz\\nbabygirl14\\n1a2a3a\\nsupernova\\nkontakt\\naussie\\nbraves1\\nqazzaq1\\nitalia1\\njesusislord\\nzouzou\\nfunny\\n12345n\\nporter\\nimcool1\\nkatarina\\nlibrary\\ncristina1\\ncatarina\\ncarlos123\\nplanet\\nshotgun\\n1fuckyou\\npuppy123\\neugene1\\nhejsan\\nmoocow\\ndillon1\\ndevil1\\nme\\ndemon\\ncandice\\nsahara\\n654654\\nlovergirl1\\ntrinity3\\njesusis1\\nchristy1\\ncastro\\nrunning\\ntheboss\\nmichael3\\nlawrence1\\nnoodles1\\nkatelyn\\nwhatsup\\nfuckface1\\nchandra\\nwhatsup1\\nwrangler\\nbabygirl01\\nabcabc\\nfamily123\\nbubba123\\n895623\\nz1x2c3v4\\nemmanuel1\\ntelevision\\nhoward1\\ndannyboy\\nwhiskers\\nmanunited\\nelaine1\\nfreak\\n-\\nmalaysia\\napple12\\n7253497a5e31bd64\\nholla1\\nschalke\\nmadina\\nchivas10\\nyuliya\\nrjynfrn\\ncj:\\nsafety\\nmyspace101\\nqaz123456\\nchronic1\\nsilly1\\nqwerasdfzxcv\\ngoddess1\\n123456i\\nnofear\\ncute\\nbaseball21\\nalex11\\n74108520\\n2580\\njimmy123\\nthirteen13\\ngameover\\nagosto\\nsquirt\\nhappyday\\ngilbert1\\n1hottie\\nlove55\\nlowrider\\ncarrot\\na00000\\nPatrick\\nweezer\\njeffhardy\\nblabla1\\nqueen\\npurple11\\nkitty12\\nkendra\\ndimitri\\ngroovy\\nskyler\\nhondacivic\\nfeder_1941\\nsimpleplan\\nnikita1\\nlovehurts\\nhellothere\\ndkflbckfd\\napple2\\nalex1234\\nunique1\\nscania\\nwow12345\\nbuddy2\\n2002\\nwaheguru\\nkillme\\nhalloween1\\nblue23\\ndalton1\\n1970\\nsanchez1\\nneptune\\nloved1\\nпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ\\n1й2ц3у\\nthanks\\nfrances1\\nbenito\\nbears1\\n*123456\\nprincesa1\\nqazzaq\\npurple13\\nmonkey01\\n123456789w\\ndoodle1\\npimp13\\nmobster1\\n404040\\nmegaman1\\niloveyou23\\nashish\\niamnumber1\\nsurside13\\n741258963\\n19711971\\ngotohell\\nheslo\\ndelphine\\noranges\\ninsert\\nkawasaki1\\nhannibal\\nmommy3\\ngegcbr\\nkucing\\nfatcat1\\npooper1\\nhaters1\\neleanor\\nloser2\\ntrumpet\\nstoner1\\nassass1\\nstalker1\\noklahoma\\ncheche\\nbordeaux\\nq2w3e4r5\\npa\\nsunshine7\\nwizard1\\nmakayla\\nrenato\\nkoshka\\nab1234\\nwanker\\n1971\\nbeagle\\ntiger2\\ncricri\\nadministrator\\ngod123\\nbobbob1\\nmoney3\\nmanager1\\npavilion1\\nsylvester\\norange123\\ncherry123\\nmathias\\ncoconut1\\nkaka22\\nfredfred\\nwassup\\nmonkey6\\nmonkey10\\nbaby15\\nthompson\\ntabitha\\ngoofy1\\n456987\\nlouis\\njonjon\\nnursing\\nshaman\\nmedina\\nclassof201\\nmyspace9\\n123456789e\\nbabybaby\\n????????\\njehovah\\ndream1\\nsmooth\\nsantana1\\nclass09\\nstandard\\nmonkey4\\nmomof3\\nfirefox\\ndell123\\nsandy123\\norange12\\njoker13\\nfamous\\nbaby08\\nlovesucks1\\nwoodstock\\nhariom\\nadam123\\npelusa\\ndragon11\\ncatania\\nchloe123\\n2010\\nmargarita1\\nluciana\\nleopard\\nsylvie\\nmetal\\nkaykay1\\nhermosa\\nQWERTYUIOP\\nihateu1\\nrootbeer\\ndaniel2\\ntaylor123\\nnick12\\nhotmama1\\nloveyou123\\nirock1\\nvitoria\\npopo\\ntrombone\\nmattie\\nanna123\\npepper12\\nmarino13\\nbatman2\\nyouyou\\nhockey12\\nmemphis1\\nmatthew2\\nmalaga\\nkayleigh\\nhollister\\ndietcoke1\\ncapslock\\n22446688\\nredhot\\nigor\\nmaggie12\\nsystem1\\nprincess14\\npirates1\\nmorpheus\\nlesbian1\\n20022002\\nwasser\\nbuffy\\nalexander2\\n01010101\\nglitter\\nantony\\n131420\\nmexico12\\nsearch\\nerika1\\nrichie1\\nsexymama\\nromina\\nlokomotiv\\nfootball4\\n110119\\ns123456789\\ndangerous\\ntrance\\nelectric\\n827ccb0eea8a706c4c34a16891f84e7b\\n2525\\n123456789f\\ndaniil\\nfreebird\\nsponge1\\nredbull1\\n12345600\\nstormy1\\nmember\\nxander\\npenguins\\npassword15\\nhellboy\\nstarbucks1\\ncookiemons\\narianna1\\nqqqq\\npurple3\\nbarsik\\nwhatever!\\nchipper1\\nangel21\\nmadness\\nlittleman\\nhotty1\\nchuck1\\n6V21wbgad\\nangel15\\nshelley\\nkittykat1\\njose12\\ntarheels1\\nking23\\nemanuele\\ngiggles1\\nchivas11\\ntupac1\\ntrooper1\\ncocoa1\\nflower2\\nbusted\\nkim123\\naz123456\\nsmackdown\\nkangaroo\\nleandro\\nwhiskey1\\nsasha12\\nfootball8\\nalexandria\\nsummer01\\nangel23\\nultima\\nracecar\\ncancer1\\npasword\\nescape\\ncamilo\\nlarry\\nbangalore\\nfalcons\\n145236\\nsunny123\\nsusan1\\nsmith1\\n767676\\nconnie1\\n1997\\nflyers\\nblowme1\\njoaquin\\nfuck0ff\\nbrandon123\\nshitface1\\nbobbie\\npunkrock1\\nteamo\\nsalvation\\npenis123\\nqqqqq\\ne12345\\nburton1\\ndevon1\\n123459\\nsuresh\\nfra\\ndad123\\numbrella\\nvectra\\nlegolas1\\nhunter2\\nakatsuki\\n123456789h\\nemail\\nonline1\\n456456456\\nmyfamily\\nlola123\\nmazda626\\njonas123\\nskater123\\nfaithful1\\nbaby22\\nspanish\\nrupert\\naccord\\ngoodman\\nleonardo1\\ndont4get\\nmommy12\\nmaddog1\\nihateu\\nbrandon12\\nartemka\\nqwert1234\\npolopolo\\nmadden\\ncheese2\\ncamera\\nben123\\nsean\\neunice\\ncheesecake\\npooper\\n159753456\\nmyspace23\\nanarchy\\nwilliam2\\nshadow01\\nkirsten\\njunior123\\njasmine2\\nernest\\nbigtits\\nprincess21\\ndharma\\nwelcome12\\ntorres9\\nmotherfuck\\niubire\\ngoblin\\nrachael1\\npostal\\ntom123\\njesus01\\nilovemom\\ntaylor2\\nkentucky1\\njunebug\\ngiggles\\nhiggins\\nsouljaboy1\\nsupergirl\\nsenegal\\nqwaszx12\\njennie\\nblackjack1\\nrocknroll1\\nguillermo\\nwanted\\nford\\ncorazon1\\nmymother\\nprelude\\nmagic123\\nboy123\\nwerder\\ncosmo1\\ndemon666\\ncaca123\\n747474\\ndeanna\\nqqqq1111\\nkrasotka\\noutlaw1\\nyomomma1\\nbobmarley1\\nwww123\\np12345\\nnicole13\\nmariano\\njohnlock\\njuan123\\nroxanne1\\nphilly\\ntemp123\\nsilence\\nswimmer\\nmother123\\nstevie\\nretard\\nfriends123\\nandrew2\\namelia1\\nnikolas\\nmarino\\nhunter01\\nrobert123\\nyamahar6\\ntattoo1\\nsnakes\\nfrogger\\nlizard1\\nlibero\\nihateu2\\nbaby101\\nwindows7\\nwarriors1\\nchangeme1\\n123йцу\\nweed123\\nprincess22\\ngirl\\ndaphne\\n11111111111\\npassport1\\nmorales\\nloulou1\\ngriffin1\\n19051905\\nstar11\\nkamasutra\\nbrigitte\\ndauphin\\n12345678s\\nникита\\nnumber3\\ngabrielle1\\nallen\\n1999\\nfyutkbyf\\nsalvador1\\nchris13\\nbayern\\nagustin\\n1q1q1q1q\\n123456781\\n114477\\nnicole11\\nbiscuit1\\nkelly123\\nhotboy\\ncamille1\\nmyspace22\\nsecret666\\npimpdaddy1\\ncourage\\nbirthday1\\nbabyko\\ntracy1\\naaron431\\nblackdog\\nbigmac\\nbabygirl7\\n2008\\npoodle\\nmonopoly\\nbelle\\nbingo\\nmarcia\\nilovesex\\ngay123\\nkayla123\\nalucard\\n123abc123\\n789789789\\nmy3boys\\nwutang\\ndamien1\\nviviana\\nnicky1\\n1mother\\njones1\\nludmila\\ncharger\\nchucky\\n0987654\\n1212121212\\njune12\\nfrogger1\\ndancing1\\nwonderland\\nblanca\\n333444\\nopenup\\nmedion\\nbelle1\\njoshua123\\namours\\nlaura123\\ntitans1\\nsucker1\\nnasty1\\nmatthias\\njack12\\ncutie101\\njunjun\\n2007\\nstrike\\ngreen2\\nfletcher\\nanimals1\\nThomas\\ndaredevil\\nzipper\\nmaryam\\nkristian\\n996633\\nshanghai\\nleelee1\\nhenry14\\npudding\\ngabriela1\\nferret\\nsmelly1\\nstratfor\\nлюбимая\\npassword09\\n258000\\njeanette\\nspitfire1\\nbitch3\\nlowrider1\\ncartoon\\nmaggie123\\nkomputer\\ndreams1\\npatriot\\nkitty2\\neatshit1\\nzaqxswcde\\nmishka\\npollito\\ngorilla\\nballs1\\n211314\\nmystery\\njanjan\\ntiesto\\n4444444\\n000webhost\\nbuddy12\\nthug4life\\ntianya\\nhfytnrb\\ngrandpa1\\nannette1\\n373737\\nsweets1\\nrachelle\\nji394su3\\nevelyn1\\ndragon69\\nbiggie\\n333777\\nwelkom\\nkentucky\\nnobody\\neverest\\namerica123\\nchoupette\\npokemon2\\nestrela\\nmandy\\n797979\\n635241\\nqaz\\nichliebedich\\nufkbyf\\nbaby10\\nshotgun1\\nnonono\\nprettyboy1\\nasdfghj1\\ncats\\nspring1\\nmovies\\nmittens1\\nbritt1\\nyOp7s55\\nlol12345\\nlol1234\\nkissme2\\nforzamilan\\nsooners\\npositive\\ndragonballz\\nsoftware\\nbuckeyes1\\nbubbles123\\nмамочка\\nmyspace09\\n19681968\\n110\\nharry123\\ngoodbye\\nrooney10\\nkathryn1\\nabrakadabra\\n123458\\npass12\\nmarihuana\\na123321\\nhi1234\\n1968\\ncollin\\nsexsexsex\\nfabrizio\\n10577\\nhannah2\\npallmall\\nmarilyn1\\ncherokee1\\nAlexander\\n131415\\nsisters\\nMegaparol\\njess123\\ngameboy\\ndogdog\\nwendy\\nliverpool8\\ncute123\\ncobra1\\nmexico10\\nmoney7\\nguardian\\n2006\\ninfiniti\\ndemo\\nsmackdown1\\nmonster123\\nhayabusa\\n1966\\nqqqqqqqqqq\\nbaseball23\\nstarbucks\\nseattle1\\nsassy123\\nyvette\\nmachine\\ncavallo\\nmonkey23\\nclarence\\nbeethoven\\n123456789abc\\nzombie1\\nsunshine3\\nbill\\njupiter1\\nbreanna\\nsucesso\\nbruce1\\nbecca1\\nleavemealone\\nbalance\\nhurricane\\nsagitario\\nguadalupe1\\nvfibyf\\nmmmmmmmm\\nhooters1\\ndfkthf\\nlove44\\ncitroen\\njacques\\nnumber7\\npyramid\\njorge1\\nsmitty\\nramesh\\njustine1\\nbernardo\\nstarcraft1\\nlancelot\\niloveyou21\\nboss\\njosh12\\nasroma\\nstargate1\\nlolipop1\\nprincess4\\nnumber9\\nedison\\nvfitymrf\\nstefanie\\nmaksimka\\nrootbeer1\\nmazdarx7\\nfuckyou5\\n00112233\\nfatass\\ncharlie12\\n123456789.\\nbubbles12\\nreebok\\nbrendan1\\nangel16\\nalpine\\nrebound1\\nlulu\\n1money\\n709394\\nsparrow\\nmacmac\\nrosie\\nmusica1\\npasspass\\nmongoose\\ncamaroz28\\n951357\\njasmine123\\n1234567m\\nlovingyou\\nchubby1\\nvicente\\nroger\\nkleopatra\\nlukas\\nsantosh\\nbeach\\n128500\\nkrista\\nkiki123\\niphone\\nmotocross1\\n7758520\\nunknown1\\ntazmania\\nsheba1\\nportugal1\\njenna\\nbriana\\noriginal\\nbutterfly3\\nxbox\\npreciosa\\nbeaner1\\npatrik\\nbowling1\\nrebeca\\neureka\\nconner\\ncinema\\ngunners\\ndiamante\\nxxxxxx1\\npierre1\\npepsi123\\nlinda123\\nmafalda\\nluna\\nlilmama\\n963258741\\nintegra\\nhercules1\\n4myspace\\npandora1\\n987123\\nvolkswagen\\nnikki123\\npatate\\nnigga123\\nmy4kids\\ngoldberg\\n123698741\\nzacefron1\\njordan3\\njazmine1\\n1234zxcv\\nmelisa\\nmollie1\\ndookie\\nsu123456\\njenifer\\ntopsecret\\npoker1\\nginger12\\ntina\\nq11111\\nmyspac3\\nlovely2\\njericho\\nteddy123\\npopo123\\nanime\\nashley11\\nthesims2\\nivanova\\nbitch01\\nasdfzxcv\\nbryant\\nlemons\\ntogether\\nneveragain\\nsoccer19\\nstranger\\nsamantha12\\ncolleen1\\nsummer2\\nCharlie\\nilovechris\\nлюбимый\\nbellissima\\npeterpan1\\nmaddy1\\nmark123\\ntyler12\\nprincipessa\\nellie1\\nsponge\\ndorian\\ncody\\nabc321\\ntitanic1\\npornstar1\\ngordon1\\n2001\\nmeghan1\\nasdasd666\\nms0083jxj\\njoejonas1\\njordan01\\nfabio\\n2good4u\\nmyspace69\\nfallout\\n7753191\\npackard\\npaladin\\nbenny\\ntracey\\nsprite1\\nviolin\\nmanny1\\nlillian1\\nkristy\\nyummy1\\nvancouver\\nlucky12\\nmathew1\\nsimran\\ngiorgia\\nnicole3\\nlucky2\\nkarate1\\nestelle\\nmissy123\\ndance123\\ncarmela\\nbutthole1\\ncarolyn\\nbratz1\\nnacional\\n12312312\\nsameer\\nblazer1\\n121121\\ntiger12\\nsmooth1\\nhacker1\\nbkl29m2bk\\njoejoe1\\n14141414\\npothead420\\nfatman1\\nstart123\\nchase\\nbabyboy2\\nrustam\\nmylove123\\ncoco12\\nyolanda1\\nwilly1\\ncapricorn1\\nnguyen\\nmelody1\\ng12345\\nlinkedin2011\\nfortune\\nkhalid\\n444555\\nstingray\\npot420\\nqazxsw123\\nbutton\\nhannah01\\nmustang2\\nmoney11\\npdtplf\\nbacardi\\niloveyou9\\noakland\\ngonzales\\nshit123\\npippin\\nmoonlight1\\nisaac1\\nbrooks\\nmyself1\\nfgtkmcby\\n1sunshine\\nswimmer1\\nbetty\\nmylinkedin\\nhentai\\ndirtbike\\nasdfghjkl123\\nsexsex1\\nqueenie\\nincorrect\\nalbina\\nwallace1\\ncgfhnfr\\nnina\\nskater12\\nsrinivas\\njohnny5\\ndaniel01\\nben\\ndorothy1\\nhawkeye\\nstudio\\nsexyme1\\nhermes\\nturner\\ntriumph\\nallie1\\ntechn9ne\\nloredana\\njesussaves\\ncooler\\nmoneyman\\nlalala123\\na1s2d3f4g5\\nbrayden1\\narnaud\\nazertyui\\nmarried\\nblacky1\\napril12\\nskylar\\n1234rewq\\nmyspace8\\nprincess23\\nblaster\\ntorino\\nchivas123\\n5plK4L5Uc7\\n12qw12qw\\nthree3\\nsandman1\\npunisher\\nlonghorn\\nbender\\njones\\npaula\\nkonstantin\\narchie1\\nlisa123\\n7007\\nriley\\nfree123\\nbigpimpin1\\nJessica\\n484848\\npasaway\\nsara123\\nismail\\nbearbear\\ndesmond\\nslipknot6\\npanda123\\nfuckyou11\\nlonewolf\\ncharger1\\nlatina1\\n1998\\nking1234\\ngothic1\\n1235789\\npsycho1\\nmarvel\\neeyore1\\n8522003\\niloveu12\\nmegan123\\ntemp1234\\n<password>\\ngretchen\\ngiorgio\\njosefina\\nhorny1\\nescorpion\\ncolton\\nhaha12\\ntamara1\\nrobert12\\nregister\\nprakash\\nmykids3\\ncleveland\\nmother2\\n2sweet\\nroscoe1\\nqwe1234\\ndirector\\nrossi46\\nred1234\\njimbob\\nsenior09\\ncomputer2\\nseptiembre\\nmango1\\nkill\\nchacha1\\nstart1\\npancho1\\ngandalf1\\nhithere\\n1234567j\\nmarried1\\nmarcello\\nmimi123\\nmatilde\\njesus3\\nnadia\\ndragoon\\njesusfreak\\nshakira1\\nhonesty\\nchickens\\nvlad\\nhello9\\nbenji1\\nn12345\\nariel1\\n1loveu\\nmaribel\\nbeaver1\\nallah786\\n141516\\nredwings1\\nreaper1\\nmyangel\\nmickeymouse\\ngsxr750\\ngavin1\\nfrench\\nmallorca\\nfallout3\\njordan13\\nirene\\n147896\\nweasel\\nmadeline1\\nmV46VkMz10\\napollo1\\nbenoit\\nkoolaid1\\ncardinals\\nravens\\npimp11\\ngamecube\\naustin12\\n518518\\nturbo1\\nfelicia1\\nafrica1\\nphone1\\ndominican1\\nbighead1\\nkieran\\ngator1\\ndarkangel1\\njean\\n321\\nmason\\nilove123\\nalegria\\ncantona\\n1967\\ncowgirl1\\nryan12\\nparadox\\niamcool1\\nalison1\\ndonovan\\nlegion\\nhello3\\nbright\\nreading\\ntyson\\nmurder1\\nmomo\\nmission1\\nbenji\\n12345qw\\nboxing\\nnataly\\nduke\\n7896321\\nzxcv\\npwtest\\ntom\\nrespect1\\nportland\\narmando1\\nvinnie\\nprinter\\nlove2009\\nlogin\\nflash\\ncolumbia\\nloveme3\\n868686\\ncazzo\\nnoelle\\nminime\\nferari\\nanthony3\\nhubert\\nnoodle1\\nstunt101\\nsousou\\nskyler1\\ntomate\\nqwerty77\\nismael\\naubrey\\nnovember11\\njewels\\n7412369\\nw\\nisabelle1\\nfuck666\\nsunset1\\npearl1\\nmariya\\njoe\\nceleste1\\ngiraffe\\nmadagascar\\nduncan1\\nceltic1888\\ntractor\\nmadeleine\\nclinton\\nbugsbunny\\nashley13\\nmonika1\\nwerner\\ngrizzly\\nroxy123\\nwilly\\nbeer\\nbeanie\\n1iloveyou\\nohiostate1\\nargentina1\\nsalomon\\nbabe123\\nmeredith\\namalia\\nyandex\\ngiacomo\\nsimpson1\\nfinalfantasy\\nmadison2\\njeffery1\\ncomputador\\naiden1\\nbasketbal1\\nslipknot66\\ncoolgirl\\ncoolcat\\nbuckeye\\nwarren1\\ndurango1\\ncavalier\\n334455\\nyvonne1\\n23456\\nmeowmeow\\nbabygirl15\\nordinateur\\nkate\\nshmily\\nnugget1\\nPa55word\\nchildren3\\nkjkszpj\\nincubus1\\neduard\\nwoaiwojia\\nsalmon\\n2345678\\nscream\\nfreckles1\\nbrown\\n15151515\\ngrapes\\n777999\\n123456aaa\\nhonduras\\nheroes\\nbeetle\\nmarie12\\nforest1\\nmaryjane42\\nwarszawa\\nbabygirl5\\nserver\\nkosmos\\nfabulous\\n101101\\npink22\\nm0nkey\\n1qazzaq1\\nwaters\\ntesoro\\nnurse1\\n20052005\\n123321123321\\ngandako\\ndidier\\nderek\\n3.1415926\\nlucia\\ncoolman1\\n222\\nteamomucho\\nsexy09\\npussy2\\nshorty13\\neatshit\\neasy123\\nchicca\\nbitch5\\nhot\\nceltics\\nrammstein1\\ndaddy2\\nqwerty777\\n1loveme\\nlewis1\\n5482++\\nzigzag\\nlonghorns\\nlatino\\ndragon7\\nhappydays\\nanthony7\\n434343\\ntekiero\\nmileycyrus\\njake12\\nharley01\\nzhjckfd\\nsusan\\npeluche\\nkfhbcf\\ndaddy12\\nshowtime\\nasd123asd\\nz123456789\\nkansas\\nbartek\\n123123123123\\nbaby09\\nabcde123\\nпїЅпїЅпїЅпїЅпїЅпїЅ@mail.ru\\nsuperman7\\noakley\\nilovehim2\\nmallory\\nlahore\\nananas\\ngoogle12\\nimnumber1\\nguitarra\\nnevaeh1\\nimpala\\nbaseball24\\n115599\\nsecret123\\nmariana1\\nyj2009\\npepper123\\nkipper\\ncaca\\n159753a\\n14344\\nqwerty!\\ngirasole\\npiccolo\\nclassic1\\n1596321\\nmultiplelog\\nloves1\\nbaby07\\nmyspace0\\n383838\\ntabitha1\\nmondeo\\ndeftones1\\narlene\\ngizmo123\\ndavid2\\nauburn\\nyannick\\nshibby\\nnoname\\niamcool\\ncheer123\\nchaton\\npaolo\\nlifesucks1\\ncrimson\\ncoolguy\\nJennifer\\nvalentina1\\nbernard1\\nAbcd1234\\nbabygurl12\\npeekaboo\\nleonie\\nfuckface\\nvioletta\\nmechanical\\ndaniel11\\nbintang\\n168ASD168\\nsexylove1\\nlemon8\\nredalert\\ntrucker\\nshorty12\\nhanson\\nLondon\\n12211221\\nradio1\\nguigui\\ngreen7\\nforget1\\n007\\nchivas12\\nbudweiser\\nsuperman3\\npacific\\ngaston\\nonlyme\\niverson1\\nbumblebee\\narsenal123\\nnewpassword\\n132465\\npoonam\\nginger123\\nbigmoney\\nyankees13\\nsilvana\\n555556\\nelmo123\\nanjing\\n1357913579\\nzazaza\\nwellington\\nbunny123\\n789632145\\nbraveheart\\nmercury1\\npuppylove1\\nlebron\\n727272\\nwonderful1\\neuropa\\n1234567s\\njumper\\nvenezuela\\nsexy18\\nmary123\\nhellsing\\ncarson1\\nrevenge1\\napplepie1\\nracecar1\\nmonroe\\nfatman\\namoure\\n7777777a\\nw12345\\nromero\\nmonkey101\\ndude12\\nlesbian\\nfossil\\ntoledo\\njordan5\\nalex01\\nmonkey21\\nluke\\ncleveland1\\nastrid\\ny123456\\npeyton1\\ntyler2\\nblueeyes1\\nchris11\\nbigmoney1\\n123456789qwe\\npassword88\\na112233\\nmayday\\nDragon\\njunebug1\\ndomingo\\n19991999\\nmusic101\\nk.lvbkf\\ntomtom1\\n19031903\\n13\\nericka\\nbagira\\nshawn\\nrihanna\\nmomomo\\nroma\\nsterling1\\nroxana\\nmaria12\\nlemonade\\n333222\\n12321\\ntigger01\\nflyboy1\\nstoner\\nrafael1\\n1z2x3c4v\\n!qaz2wsx\\nltybcrf\\ndortmund\\ngorgeous1\\nbetter\\nhustler1\\nalexa1\\n606060\\nrambo\\nhockey11\\nschool12\\npompom\\nil0veyou\\nfour20\\ncantona7\\nW5tn36alfW\\nsvoboda\\nnastia\\nminerva\\nvendetta\\ncolts18\\nwaterloo\\nlightning1\\ntechnics\\nspectrum\\neleven\\nprincess15\\nplayboy123\\ncody123\\nqqqwww\\nthankgod\\ngeorgina\\nbroadway\\n10\\ndemon123\\ncentral1\\nbabygirl09\\nvbkfirf\\ncrip4life\\nZXCVBNM\\n1221\\nsaskia\\nhottie3\\nhotshot\\npeanut12\\nmaradona10\\nlifesucks\\nkaykay\\ndfcbkbq\\nclifford1\\nchicken12\\nbaby21\\nashleigh1\\nnaruto2\\nmichael23\\nMichael1\\nbobo\\n1qay2wsx\\n19671967\\ntenerife\\nteiubesc\\norange2\\nmckenzie\\nfish123\\nfirebird1\\ndbrnjh\\nbaseball14\\nrevenge\\nannamaria\\nchemical\\ntesting1\\nmazda6\\nhoover\\nmahesh\\nbeckham23\\ntrucks\\nsteelers7\\npeanut2\\nmiracle1\\nlast\\nmar123\\nmariajose\\ncoolkid1\\nc.ronaldo\\npooppoop\\ngeorgie\\nsoftball11\\nnumba1\\nheineken\\n1111qqqq\\nsouth1\\nqwertyui1\\nkakaka\\nbabyboo\\nselina\\nemachines1\\nbrighton\\n123412\\nabcd123456\\nbitch11\\njobs\\npassword24\\nartemis\\nnanana\\nbaseball6\\njaguar1\\nasd1234\\nmagnus\\n200\\nxfiles\\nmummy1\\njasmine12\\ngrizzly1\\nlady\\ncruzazul\\nduchess\\nbabygirl!\\njune22\\n123abcd\\nnorthside1\\naddison1\\n1й2ц3у4к\\nsenior08\\nbeloved\\ncaballo\\nyoutube1\\nfanfan\\ncarlotta\\nterror\\namy123\\nstewart1\\nblake\\nskiing\\nscooter2\\nphoebe1\\n0192837465\\nmaximo\\njoshua01\\ntheused1\\nqdujvyG5sxa\\n0123\\nliberte\\npakistan123\\noklahoma1\\n123654a\\nvaleria1\\nK.:\\ncandice1\\n357951\\noverlord\\nlife\\n1michael\\nrockets1\\nbball\\nkeeper\\nporcodio\\nimperial\\nastonvilla\\n9958123\\nemiliano\\ncutie2\\nandy123\\ntommy123\\nazamat\\naerosmith\\ntequila1\\nqwaszx1\\noleg\\nmaryann\\nbriciola\\nutopia\\nqwerty5\\nhelloworld\\nvolley\\njermaine1\\nsemperfi1\\nyyyyyy\\ndylan123\\nsonyericsson\\nquality\\nnokia5800\\njunior12\\nfranck\\nqwer4321\\npimp23\\nhello.\\ndiamond2\\nstones\\nlionheart\\nhelp\\ndirty1\\nsullivan\\nlizzy1\\nlinkin1\\nthomas2\\nmoney100\\nyxcvbnm\\nchevys10\\nmathis\\nindia1\\neragon\\npietro\\nmickey12\\nknights\\njessica3\\n22\\nx123456\\nviolet1\\npirata\\nseagull\\neight8\\nbear123\\nhussain\\ngonzalo\\nrereirf\\nqwerty78\\nmykids2\\ngreen13\\nleft4dead\\ngillian\\n119119\\nssyu1314\\nfootball!\\nlovegod\\njoyjoy\\nbaby16\\nnegrita\\n111111111111\\nbookmark\\n123456abcd\\nblack12\\ngodis1\\ndaniel13\\nclassof200\\naddison\\naaron123\\nsexyman1\\nponcho\\nlamborghini\\nhonduras1\\nrainbows\\nescort\\ncar\\nbalaji\\njillian1\\nhealth\\ndeanna1\\n159159159\\nwestwood\\nracing1\\ngambit\\ngirlfriend\\ndogs\\nzaqwsxcde\\nrtyuehe\\ncbr600\\nsunshine!\\nmustangs\\nhelloo\\ndonnie\\ntrial\\nnoisette\\nmargherita\\nlucy123\\ncoolcool\\nalex10\\npassword19\\npassword08\\nmickey123\\n1965\\n123qwe123qwe\\n12345v\\nwoody\\nhighlander\\n19651965\\nprasad\\npasswords\\nnumber\\nfuzzy1\\nwarlock\\nnetwork1\\nmymusic\\npolo\\nfusion\\ntoto\\nredred1\\nqwe789\\nthirteen\\nilikepie1\\nbiggie1\\nzeppelin1\\n1964\\nwhatever2\\nnicole01\\njonas\\nchelseafc\\nblossom1\\nvicky1\\nclass08\\nxboxlive\\nlampard8\\nfootball24\\nvishal\\nkillers\\ndaniella\\ncintaku\\npablo\\nmyspace07\\ndddd\\nclassof07\\nangel07\\n20072007\\ndaughter\\napril20\\nmoises\\n1475369\\nkeith\\nfrosty1\\nahmed\\n333333333\\nmanson1\\nadventure\\nimgay1\\nfootball20\\nfabrice\\nwertyu\\nherbie\\nandrew11\\nmagali\\ncheese!\\nalisha1\\nnewmoon\\nludovic\\ncazzone\\nburger\\nanita1\\nchevrolet1\\n100200300\\nevgeniy\\n646464\\ndurango\\nsoftball2\\nblade1\\n45454545\\n.adgjmptw\\nmatheus\\n23jordan\\npoptart1\\nevergreen\\ncompton1\\nbecky\\nstart\\nfuckthis\\nforzaroma\\nbadboy2\\n123456789v\\nsplash\\nmon\\nm1234567\\nglitter1\\naaaaaaa1\\n0147258369\\nguatemala\\nchucky1\\nhohoho\\n198888\\niloveyou09\\n142857\\n123369\\njune23\\nfaggot\\ncheetah1\\nspunky1\\npaola\\nmonkey8\\nfriends!\\ncandy2\\nshorty123\\nnumber5\\nlove26\\ncadillac1\\nlorraine1\\ncarlos12\\nwebster1\\nlifeisgood\\njesus!\\ncorinne\\nMichelle\\nmommy11\\nsoftball10\\nminette\\ntoffee\\ntheodore\\nrdfhnbhf\\npablito\\nstarlight1\\nsoftball7\\nzzzzzzzzzz\\nmatador\\njustin11\\npepper2\\ndelete1\\nretired\\nposeidon\\njennifer12\\nvicky\\npoipoi\\nomega\\noctober10\\ngodislove1\\nchivas13\\nnikitos\\nsnoop1\\npeanuts1\\nlaurita\\niluvu1\\nclarinet\\n1234565\\nlove777\\nitalian1\\nbloody\\ntkfkdgo\\nsupergirl1\\nsammy12\\nsilverado\\npatito\\nlenochka\\ncimbom\\nsuzuki1\\niloveyou15\\ndogdog1\\nsusanne\\nmoon\\nlosers1\\nhope\\nauburn1\\nlouis1\\nlove27\\nsweet12\\n12345qwer\\nmichela\\nkaka\\nlight\\njune21\\ncharley\\ncommando\\namanda2\\ndick123\\nbaker1\\nporkchop1\\nstanislav\\nmusic4life\\nhater1\\nqwerty69\\nlolita1\\nchico\\nariana1\\n626262\\nsteffi\\nfamily2\\nshawty1\\nmeandyou\\njenjen\\narchana\\nheidi1\\ncucciola\\nreddog1\\nrawr123\\nprissy\\nmunchkin1\\ngeorge123\\nflipper1\\ndemons\\n<blank>\\nwhiteboy1\\nnightwish\\nsharma\\nprincipe\\ngo2hell\\ncarmelo\\nbigbang\\nilovemysel\\n123890\\nsantos1\\n1234567z\\nmassage\\nfront242\\nпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ\\nfuckyou6\\napril22\\niloveyou6\\nslavik\\nhandsome1\\nShadow\\ncoolcat1\\n159753123\\ntwilight12\\nlipgloss1\\nballin\\nchrisb1\\nankara\\nchristian2\\naptx4869\\ncrjhgbjy\\nshorty2\\ncotton1\\nsleepy\\nsidney1\\nforzainter\\nstevie1\\nkontol\\nhilary1\\nfreedom2\\n2020\\nstriker\\nsoccer08\\nhalflife\\nceleron\\nredrum1\\nmyspace200\\nshitty1\\npimpin2\\nlove34\\nmuslim\\ncontraseña\\nalbatros\\nkiller13\\nAZERTY\\nprincess8\\nlivelife\\njelly1\\nbudweiser1\\nmanisha\\njackjack\\nemerald1\\nblessings\\nsolomon1\\nkhushi\\nsoccer07\\nholland1\\n14881488\\nresident\\nparrot\\nzxcvb123\\ncontrol1\\nbiteme2\\nrandy\\npft:\\ncelina\\nbailey12\\namerica12\\nkenzie\\njustin01\\nhannah11\\nrainbow123\\nglamour\\nblade\\na1a2a3a4a5\\n2009\\n123456qwer\\nйцукенгшщз\\nthomas22\\nssssssss\\njazmine\\nfred123\\nsomeone\\njessica7\\nangel69\\nvenus\\nstar13\\nmy1love\\nbonheur\\napril21\\nali\\nmyspace201\\ndr.pepper\\nblackbird\\nkittens1\\njamesbond007\\nrivera\\nsexy17\\ndfg5Fhg5VGFh1\\n780813\\nseniseviyorum\\nbabygirl21\\npink101\\ncrazy12\\nclover1\\ncelica\\ncanela\\nfriends4\\nmasters\\n520530\\nspace\\npistons1\\npersik\\n12345677\\nadrien\\nfuckyou4\\ncobra\\naa1234\\n2003\\nspanish1\\nmike23\\nconfused1\\ntecktonik\\nignacio\\ngeoffrey\\ncandycane1\\n1a2a3a4a\\nbengals1\\nbball12\\nabcdefgh1\\np455w0rd\\njune13\\njessica13\\ngotcha1\\n1diamond\\n1231231\\ncoleman\\nlassie\\nsquall\\nlove2008\\ndoctor1\\nchivas100\\nshanti\\nbernadette\\n22334455\\nveronique\\nmartin123\\nangelus\\njess\\ncecilia1\\nbrothers\\nbaseball15\\nrabota\\nplymouth\\nenrique1\\ncomfort\\ntaytay\\nindian1\\nsummer05\\nstinger\\njanet1\\naa\\ninfo\\nkiller11\\njoey123\\njerusalem\\ncowboys22\\nangel4\\nmarcos1\\nsilent\\nlabtec\\nsupport\\nsimon123\\nou812\\nn1frdz\\nXBLhInTB9w\\ntomorrow\\npallina\\nspartans\\nalexis12\\n476730751\\njourney\\nschool2\\n57chevy\\n228228\\nnotebook\\nlights\\nleoleo\\nkarine\\n7uGd5HIp2J\\n456789123\\nreggae\\nloves\\ngiovanni1\\n00001111\\nwerty\\nsoccer01\\nmatthew12\\ndookie1\\nbarbie123\\nmadden1\\nhuskers1\\nbabygirl23\\nporno\\ngabby\\n748596\\nyouandme\\nirish\\nkodiak\\n1475963\\ntemple\\nhistory1\\nd4\\nmorris1\\ncondor\\nbabygirl16\\n111999\\nfrederick\\nweezy1\\ntomas\\nrenee\\nmaggie01\\nsoftball13\\nroxy\\njared\\nrobert2\\nleonard1\\nbeautiful2\\nclemson1\\nkobebryant\\njoanne1\\nbuster2\\npassword20\\nlouie1\\nprincess16\\npaperino\\nnone\\ntravel1\\nsephiroth\\nmarket\\ninnocent\\n73501505\\nmarch17\\nchronic420\\ncaonima\\napril13\\nfamily3\\nJ1V1fp2BXm\\nstorm\\nredman1\\niloveyouba\\nhome1234\\ngabriel123\\ncowgirl\\nluis\\njamie123\\nvertigo\\npangit\\nopeyemi\\nnokian70\\nmusic2\\nclarissa\\ndesert\\nadeline\\njuventus1\\nsanta1\\nmartina1\\nlineage2\\nfootball09\\nlupita1\\ncevthrb\\nashley01\\nstitch\\nlaguna1\\ngoodbye1\\nzelda1\\ncha\\nmehmet\\nlove89\\nganda\\nzxc123456\\nzaraza\\nhamilton1\\ncristian1\\ncouponSC10\\nyugioh1\\nwoaini520\\nangel18\\nskinny1\\nmurcielago\\nbuster01\\n223322\\nncc1701a\\nfamille\\nbounty\\nbella12\\nshady1\\nlolo123\\njeffery\\n120\\nworking\\nsveta\\npatrice\\nmedicina\\nfighter1\\nterry\\nsoccer24\\nsoccer20\\nsweden\\nmilkshake1\\njanelle\\npie123\\nmoney4\\nbuckeye1\\nh12345\\nurmom1\\nmaurizio\\nmonkey9\\n123admin321\\nskater2\\nplastic\\natlars10\\nfunky1\\ncarol1\\namormio\\nmikejones1\\nfre\\n789852\\n777666\\n234234\\nsexy#1\\n85208520\\n123stella\\nflorencia\\ncannon\\n5X1CJdsb9p\\nwinchester\\nnigger123\\nmimosa\\nlemon1\\n707070\\nйцукенгшщзхъ\\nqazxsw1\\ngertrude\\naa123123\\nsadie123\\nfreeman1\\n123456zxc\\nvacation1\\nbenben\\npainter\\nil0vey0u\\nbugsbunny1\\nrastafari\\n20062006\\nmafia1\\nhardrock\\narnold1\\npenis69\\nmallory1\\nmelvin1\\n1234509876\\nreagan\\nbadger1\\n1963\\nwalmart\\nverona\\njocelyn1\\nexplorer1\\n5poppin\\nursula\\nnatacha\\nlovergirl\\npassword07\\n619619\\nsexy08\\nloveislife\\njesse123\\ncool11\\nconfused\\nnokian95\\nfatima1\\npayton1\\njesuss\\naccount1\\npacman1\\nmarseille13\\nhurricane1\\nqwerty666\\n20112011\\namistad\\nscarlett1\\nq2w3e4\\nmaggie2\\nlopez1\\ndaniel19\\nvenera\\npinkfloyd1\\nkikiki\\neric123\\ndollar1\\nmaximum\\njade\\nblack2\\nacuario\\nmark_963\\nhalo\\nlivestrong\\nfaster\\n1butterfly\\ntwister1\\nbilly123\\nlovely12\\nlorena1\\njordan7\\nhm9958123\\nhamish\\ncenter\\nasshole12\\na1a1a1a1\\nhello7\\nfrancine\\nfamily12\\nbigfoot1\\ndarlene\\namsterdam1\\nmorning21\\njanice1\\njaden1\\nangel6\\n.\\nredsox04\\ngfhjkm123\\n717171\\nqwerty22\\ntatiana1\\nseptember9\\nbloods1\\nbailey123\\nvanesa\\ntdutybz\\ndragon01\\n@bigmir.net\\nsuperfly\\nmanning18\\nyfnfkb\\npandas\\nfghtkm\\namor123\\nnumber12\\nmulder\\njktymrf\\nilovehim!\\nstreet1\\nhuskers\\n1anthony\\n14121412\\nstealth\\npablo1\\nkalina\\npas\\nmazda323\\ncock\\nshogun\\nmelinda1\\nconner1\\n19641964\\ntkbpfdtnf\\nstarfish1\\nprincess9\\nchillin\\ncandyman\\nbutterfly8\\nterrell1\\njingjing\\nsmelly\\nscout1\\nrockstar12\\nnicole7\\nkathy\\n010203040506\\npanasonic1\\nhotpink1\\neagles5\\nbattle\\nfktyrf\\necuador\\naaaaaaaaa\\nyou\\npiolin\\nalmighty\\n??????@mail.ru\\nroman1\\ncarla\\nbridget1\\nmilana\\nmacarena\\nsausage\\npunkin1\\n1q2w3e4r5t6y7u8i\\nsexybaby1\\npothead\\ndaewoo\\nbebe\\nandrew01\\n55555a\\n1cookie\\nscarlet1\\nmeatball\\niguana\\nкакашка\\npinkie\\n777555\\n223456\\nqwertyuiop12\\n555888\\nchris01\\n1qazxsw23edc\\nмалышка\\nallah\\n1213141516\\nqwerty.\\nheidi\\nslick1\\nmicaela\\nPrincess\\ntraining\\nsheila1\\nhunter11\\nbossman\\nbuddyboy\\napril23\\n24242424\\nleader\\ncharlie3\\nramram\\nmiamor1\\nmorgana\\njune11\\nbennett\\nwhisper\\nporn\\nlovely123\\nraiderz1\\ndeadman1\\namazon\\nalondra\\n1q2q3q\\nmystery1\\nbones1\\nshooter1\\npauline1\\nlinkedln\\ndisturbed\\nbeaches\\n786786786\\n123a123\\nyahooo\\nwhisky\\nmuppet\\nadelaide\\nrestart\\nboricua\\nbabe\\n???\\nsimsim\\nebony1\\n1zxcvbnm\\nontario\\ngreen11\\nbluebird1\\nnever1\\ncolts1\\nas1234\\ntigrou\\nlilman\\nconrad\\nrjycnfynby\\nassman\\nwindow1\\nshasha\\nnursing1\\nnikolai\\n123258\\nyoussef\\nsexy07\\nangel8\\nhgrFQg4577\\n113355\\nlauren12\\njune16\\ntrojan\\nmonkeybutt\\nsafari\\njoshua2\\ndelfino\\naprilia\\nsweet2\\nlamont1\\njoseph12\\nsophie123\\nbooboo12\\nbertha\\nfriends12\\ndeborah1\\naurore\\njuly21\\namor\\npopeye1\\nlexmark1\\nkeyboard1\\nremington\\nbabygirl69\\nlight1\\nbarbados\\nxiaoxiao\\nmaymay\\nghjcnjnfr\\nblizzard1\\nskylar1\\npoetry\\npiggy\\nhollie\\nsoprano\\narcher\\nlandrover\\nitaliano\\nd123456789\\nAndrew\\nsdfsdf\\nfireball1\\n5845201314\\nmatthew123\\nlondon22\\ndavidson\\nblackrose\\n1122334\\nbanana11\\nsidekick3\\nblades\\nbabygirl22\\narsenal14\\nkings1\\nforrest\\nannalisa\\n999\\ngucci1\\nthomas01\\nthierry\\nmilkshake\\nmichael11\\ngorilla1\\ntony12\\nsurenos13\\nscooby2\\nprincess19\\npaige\\nnewstart\\nmalcolm1\\nmollydog\\nkiss123\\nfootball14\\ncamelot\\n666555\\n1player\\n1234567890-=\\nspyder\\nilovepussy\\nchristelle\\nsleepy1\\nparkour\\npalmer\\nextreme1\\ntrojans1\\nboris\\nhottie13\\nконцертных площадок и умных студентов:\\nsatana\\nchocolate!\\nspeed\\nsherman1\\nqyahzn\\nbaby69\\nstrong1\\nnathan12\\njonny1\\nmarch1\\nbeaner\\npluto\\ncomcast1\\ncancun\\nangel9\\nW1aUbvOQ\\nsparkles\\nwaterfall\\njensen\\noliveira\\nknicks\\nyou123\\nversace\\npassword17\\njordan10\\nfinger\\nelectro\\n737373\\nrbOTmvZ954\\nrasmus\\nraffaele\\nnavigator\\ntrebor\\nscottie\\nplaystation3\\ncolton1\\nmoneys\\ncellphone\\n135798642\\nsummer2010\\nmonkey14\\nahov\\npassword16\\nyoyo123\\nyangyang\\nwanker1\\nmedved\\nspike123\\nsmitty1\\nsmart\\nskinny\\nqwerty01\\nandrea123\\n123456789*\\norchid\\nmillwall\\nbooboo123\\nsheldon\\nradiohead1\\nnike\\ndeutschland\\ndt123456\\nhammers\\nwilliam123\\npaula1\\nmariel\\nbrayden\\nnaruto11\\nlove02\\nsoftball3\\nmusic12\\ncaline\\nvika\\ngaurav\\nwarning\\npiper1\\npillow\\nkrokodil\\nhonda123\\nhome123\\nfrancy\\ndragon5\\ndkflbr\\ndarkstar1\\ncaramel1\\n2children\\ntekken\\nssss\\nlove4you\\ncordoba\\ncarolyn1\\nBlink123\\nncc1701e\\nkoroleva\\nlove5683\\nlil\\nharold1\\nmichael13\\njermaine\\ngotmilk\\nwillis\\ntwins\\nmonster2\\ncamera1\\nmike1234\\nitalien\\nfucklove13\\nfirefly1\\nbuddha1\\npeanut123\\nciara1\\n420weed\\nslimshady1\\nlover69\\nihateyou!\\n212223\\nholly123\\njune24\\ngarbage\\nrancid\\nliverpool9\\nhospital\\ncepetsugih\\nblueblue\\nwifey1\\nshamrock1\\npupuce\\nmickeymous\\nbillie1\\nrjhjktdf\\nnadejda\\nmanowar\\nvjcrdf\\nkillian\\n19631963\\ncontact\\nSunshine\\njuan\\nbabygirl4\\nhomework\\nhola12\\ndigger1\\nconverse1\\ncarol\\nbitch23\\nnew\\ncookies123\\ncarbon\\ntwinkle1\\nopelastra\\nmother12\\n16\\nz00000\\nmarch12\\ngranada\\nbadminton\\n001001\\nfucku123\\ncinnamon1\\nbleach1\\nqw123456\\npowder\\nmarch23\\ntricia\\nijrjkfl\\nfoxtrot\\nxxxxxxx\\npapapa\\niloveher\\ntsunami\\nroller\\nmyspace21\\nmexico2\\nmakaveli1\\njulia123\\nicarus\\ngerman1\\nfarida\\ncrosby87\\ncapone\\nprincess09\\njulieta\\ndimples\\nz:\\nyfdbufnjh63\\nsky123\\nnissan350z\\naudia3\\nvictoire\\nnathan123\\ncontrasena\\nirishka\\nbabygirl19\\naaasss\\n1nigga\\nveritas\\npoochie\\ncherry12\\nknights1\\nasshole!\\nangel17\\njamal1\\ngoogle.com\\nariel\\nloveme!\\ncraig1\\nbossman1\\nmalibu1\\nsnoopdog\\ngringo\\napples123\\npurple22\\npassword77\\nkiller666\\nfisherman\\nducky1\\npavel\\nviking1\\nbesiktas\\nSample123\\nf12345\\nbabatunde\\nwonder1\\nq111111\\ngodsmack\\ntrust\\nschatzi\\nlacey1\\nbelieve1\\napril14\\nrose12\\nppppp\\nskinhead\\n21122112\\nkochanie\\nrakesh\\ndalila\\nlavoro\\ndavids\\nbutt\\nbunnies\\njose13\\nibanez1\\nfuckyoubit\\nayesha\\nbushido1\\npedro123\\nmandarin\\njubjub\\ngreen3\\nbabylon\\nchaos1\\nchampagne\\nhjccbz\\naugust12\\nasd666fds\\n242526\\ntoby\\nRobert\\ntweety2\\ngameboy1\\ncookie3\\nevanescence\\n123456qaz\\nqwertasdfg\\npancakes\\nwill\\npepette\\ngordo1\\ndusty\\n123456798\\n110688\\nmarcella\\ndonnie1\\ndiego123\\nbrazil1\\nbooty\\nawsome\\nskywalker1\\nqweqwe1\\njojo12\\njanette\\nblink\\nmichaeljac\\ncarmel\\nячсмит\\ntheboss1\\npokemon11\\ndaytona\\nchaos\\nbulls23\\n885522\\n01011980\\nshadow7\\n1366613\\nyanyan\\nstepan\\nfxzZ75yer\\n19661966\\ntweetybird\\npossum\\nbanana123\\nvittoria\\nusher1\\nharley123\\n987789\\ntasha\\nkkk123\\nfantasia\\nbmx4life\\nsummer99\\nmyboys\\nluther\\nfuckyou8\\nkenwood\\ngreenday12\\nfucker2\\nblue10\\ntime\\nsubway\\nzxcasdqwe123\\npulsar\\nfamilia1\\ndolly1\\ndesign1\\ntaylor01\\nravens1\\n456258\\ncutegirl\\nmaciek\\nkenzie1\\ncarmelo15\\nwsbe279qSG\\nwolfman\\nprofessor\\npassword33\\nfrank123\\napril15\\nzxcvb12345\\nliverp00l\\nsssssss\\ngymnast1\\ndonovan1\\nantares\\n1234ab\\nsherry1\\nphilip1\\nloser!\\njune10\\nforever2\\n1fucker\\nopen\\nsasuke12\\nqwe1asd\\nnicole22\\nmango\\nbologna\\nwoaini123\\npussy12\\npudding1\\nemma123\\ndiane\\npoussin\\nlove4me\\niluvme1\\ncdtnbr\\nbrowns\\n00000a\\nzyjxrf\\nmissyou\\nanswer\\npurple!\\n999000\\n112233q\\nrhiannon\\npoochie1\\neverything\\naliens\\n232425\\njosie1\\nirinka\\n214365\\nguerrero\\nfuckme123\\ncougar1\\nblackops\\nsunita\\nAAAAAA\\nbangbang\\npioneer1\\njazmin1\\nbailey01\\nLetmein1\\nthursday\\nsurvivor\\npetunia\\nmystic\\nchewy1\\ncherie\\npolaris1\\nindians\\nanarchy1\\nselect\\npharmacy\\nmatilda1\\nliverpool2\\nbloody1\\nsan\\nvadim\\nstar1234\\n666666666\\nproject\\nCharlie1\\nrodolfo\\npaper1\\nlenovo\\njesus11\\nonetwo3\\nscully\\npoiuy\\nfrancisca\\nlatino1\\nhonest\\ndallas22\\ncoolguy1\\nmyspace14\\ndarius1\\n1superman\\npatty1\\njokers\\nilovemybab\\ndominika\\nvenice\\nnextel1\\nmatt12\\njune17\\ncamila1\\nbanshee\\nbadbitch1\\nhejhej\\ngrace123\\nluigi\\nheartbreak\\nbarkley\\ndragon88\\npasword1\\nlover13\\nloco13\\nguatemala1\\noffspring\\nmmmmm\\ndiablo666\\nmickey2\\nmalachi1\\nbloods\\nромашка\\nklapaucius\\njunior2\\nguinness1\\ngrenouille\\n3344520\\nlovehate\\nserena1\\nadelina\\nroses\\nludacris\\nlalaland\\ncreate\\noctober31\\nlucille\\nprashant\\nmitsubishi\\ngrover\\n666333\\ngreece\\nmaniac\\nstryker\\nnastena\\nmanzana\\nstallion\\nkirsten1\\napril11\\nabcd12345\\nbabygirl08\\nD\\nqazqaz1\\nblingbling\\nblackman\\n852258\\nprincess08\\nnana12\\nlovesucks\\nwinmx1\\nseven77\\nrufus1\\nmazda3\\ndelta\\nloveu\\niloveyou08\\ncesar1\\nbutler\\nBailey\\n123soleil\\nyellow11\\nmash4077\\nbassman\\n987654321q\\n2128506\\n1q2w3e4r5t6y7u8i9o\\ntortuga\\nsuzanne1\\ndilbert\\nmermaid1\\ndani123\\ncherries\\nbookworm\\nandrej\\nsandhya\\nmynameis\\nbruce\\n1a2s3d4f5g\\npinky123\\nlogan123\\n2bornot2b\\nwednesday\\nprissy1\\nmonster12\\nkittie\\nfabien\\n010\\nthedoors\\ngreat\\nemerica1\\ndarling1\\n123kid\\nghblehjr\\ntuesday\\nbonjour1\\nsterva\\nmiguelito\\njuly23\\naustin123\\nspeaker\\nsamanta\\npr1ncess\\npoohbear12\\nnickjonas\\nandre123\\nharley12\\nfrance1\\n12345678m\\nsexyme\\nrichmond1\\njuanita1\\nanuradha\\n09876\\npimping1\\nandreas1\\nlatina\\nelsalvador\\ncrazy2\\ngoose1\\npobeda\\ndrogba\\nedgar1\\ncrazy4u\\ntriton\\nkashmir\\n555555555\\n0000001\\nsweety12\\nnestor\\nlegacy\\nsmoking\\nmaryland\\njune14\\nheaven7\\nballer3\\nartem\\naberdeen\\nsnoopy123\\nmoncoeur\\nsprint\\nspringer\\nnssadmin\\nhorizon\\ngoodness\\nbattlefield\\ndondon\\nlewis\\nfisher1\\nclass07\\nhotgirl\\nzxccxz\\nrosalie\\nhottie11\\n12345678900987654321\\nsonia1\\nbutthole\\nale123\\n456123789\\n12345y\\nprinter1\\npankaj\\nnike123\\nisabela\\ngotcha\\ndestiny2\\nсергей\\ngrumpy\\nchris23\\nbeast\\n818181\\n121283\\ntropical\\nroot\\nraiders13\\nangel08\\n56565656\\nbionicle\\napril16\\nsexyback1\\ncandle\\n246813579\\nzebra1\\ntheonly1\\nrainbow2\\nplaystatio\\njefferson1\\nnopass\\nmarie2\\ngirl123\\ntelephone1\\nnovembre\\ndrake1\\ntommaso\\nsaturday\\ngodofwar\\nasdfghjk1\\npasquale\\nbambino\\nsinaloa1\\nmushroom1\\ngoforit\\nmellon\\nsunshine11\\nsammy2\\nmoocow1\\ndoodoo1\\npazzword123\\nmanila\\nfkbyjxrf\\nashley7\\nfabregas\\ncambridge\\nbiology\\nmichael01\\nmarlin\\nmamochka\\nhelen1\\nalexis09\\nsuperman11\\nmoimeme\\ngymnastics\\nforgot1\\nchris3\\nbitch22\\npooh\\nnumero1\\nnumber11\\nmocha1\\nlucifer666\\nkIkeunyw\\nfuckyou9\\nbrian123\\n123asd123\\nplayer2\\ngames1\\ncancel\\nAbc123\\nсолнце\\nripper\\nlunita\\napril17\\n123698\\ntechno1\\nesther1\\nduckie\\nlucky777\\nlance1\\napril10\\nturbo\\nrocky2\\nowt243yGbJ\\nlovestory\\nkeisha\\nfuture1\\ncasey123\\n147896321\\nkifj9n7bfu\\nfuckoff123\\nnicole21\\nkeegan\\ndayday1\\nblue21\\n070809\\nlord\\nfergie\\nasdffdsa\\npuppylove\\nedward123\\ncutiepie12\\n222111\\nyoung\\nk2010302\\njaihanuman\\nalfred19\\nzimmer483\\nrobinhood\\nqwerty789\\nfabienne\\n198000\\nmichael5\\npaper123\\nazazaz\\n654987\\n1secret\\nespoir\\nabby123\\npenelope1\\nmorgan12\\niloveyou16\\ngianna\\ngeminis\\n986532\\njohn!20130605at1753\\nichliebedi\\nzarina\\nbrady12\\nsaturn1\\nkimkim\\ngsxr600\\ndynasty1\\ndee123\\ndarina\\naabbcc\\nmia123\\ncorey\\nmattie1\\ngood123\\ncatwoman\\npassword18\\nmarch11\\nathena1\\ntoronto1\\nnicole!\\nale\\n1qaz!qaz\\nhyundai\\nbonehead\\n789\\nyourmom2\\nrogers\\nkungfu\\n1chance\\nthegreat1\\nrencontre\\ncaliente\\n951159\\npiccola\\ndesperado\\ndark\\nazertyu\\nroxane\\nrhjrjlbk\\nmitch\\nluckydog1\\n1pussy\\nelliott1\\ndayana\\nbobobo\\nfreeway\\nmomof2\\nmaldita\\n123a456\\nstonecold1\\npepita\\n123456@\\nячсмить\\nrazvan\\ncrevette\\nwedding1\\na1111111\\n1love1\\nmargarida\\ndaniel10\\njoseph123\\nghostrider\\nkilla\\nj1234567\\namerica2\\npretty12\\nzanzibar\\nsolange\\nphoto1\\nmalik1\\nEh1K9oh335\\ny\\nmontecarlo\\nkakashi1\\nseventeen\\nsatan\\npeaceout\\noranges1\\nmarch22\\nclara\\nbigbird\\n123456789A\\nfilomena\\ndanica\\nanthony13\\nmonkeyman1\\nmarcopolo\\niamthe1\\n520025\\nbabygirl20\\n1414\\n110011\\npokerface\\ndiciembre\\nballer12\\ntechnology\\nbabygirl9\\n12qw12\\nkingking\\nkevin12\\nhumtum\\nmihaela\\nlittlebit1\\ncerise\\n2wsx3edc\\nbishop1\\nMatthew\\n20032003\\n1234567b\\nsharingan\\njune28\\n090807\\ntaylor11\\njapan\\nconcrete\\ncompany\\narmstrong\\nsuperman23\\nmalboro\\nchivas#1\\no123456\\nkhadija\\njune15\\nbebe123\\ntwisted1\\nisrael1\\nfucker!\\neternal\\nboxing1\\n1234567d\\nzander\\ntootie\\nsofia1\\nrock12\\nqwerty0\\nbradford\\nsmoke\\ncandygirl1\\nalfredo1\\naaa123123\\nlove92\\nballin23\\n2blessed\\ntweety12\\nmylene\\nkyle123\\nfkm:\\nblaze420\\n1qazxc\\npanic!\\nmyspace6\\nloveis\\nBenjamin\\n19411945\\nbirdman\\nangel09\\noldman\\njesus77\\nfaisal\\nballa1\\ntanya\\nlobster1\\njuly12\\njonathan12\\nreality\\npimpin69\\nmustang69\\nleon\\nhelen\\n1chicken\\nsunderland\\n203040\\n1212123\\ntrinidad1\\nramones1\\npasswd\\nglasgow\\nborussia\\nunderoath1\\nLinkedin1\\nsplinter\\nlittlebit\\nleo\\naaabbb2\\n1daddy\\nmancity\\njustin13\\nwork\\ntrenton1\\nlove100\\nconejo\\nrunning1\\nmanagement\\nholla\\npriscilla1\\nprogress\\nchicken!\\nruben\\nphilips1\\nmarch13\\nmanish\\nholmes\\ncheryl1\\nmac123\\ndaisy12\\nmaxine1\\nkirby1\\nall4one\\n333555\\nmimimi\\ngilles\\ndiana123\\nqazqazqaz\\njesus33\\nhotmama\\nекатерина\\nbretagne\\nleather\\nhahaha123\\nsneakers\\nloser5\\nkiller5\\nzorro\\nfaith123\\nangelbaby\\njorge\\njanina\\nashley3\\n19191919\\n12348765\\nsenior\\npoppop1\\n667788\\n100500\\npatriots12\\nmatthieu\\na987654321\\nsupermario\\nmarch15\\ngreen5\\nалексей\\nralph1\\nharley2\\nbryant24\\n78963214\\nnaynay1\\nminouche\\nkasia\\ndontforget\\ncrepusculo\\nnicole14\\nmygirls\\njune26\\nchildren1\\nbertie\\ntexas123\\nyeah\\nnovember19\\nnatalka\\nbessie\\nqaz123wsx\\nmmmmmmmmmm\\nmarch21\\nlaptop1\\ngggg\\nchino1\\nangelita\\nyellow5\\nstartrek1\\npink14\\nhedgehog\\neurope\\nhooligan\\nriver1\\nkaka123\\nk123456789\\neminem123\\n1233210\\ntennessee1\\nr1cd38d\\nqwerty21\\njason12\\nchildren2\\nabby\\nmoritz\\ngreenbay\\n?????????\\nyesyes\\n2424\\nsamuel01\\nedward12\\nfrog\\n51505150\\n393939\\n2gether\\nbudapest\\nluis12\\njesus4me\\ndonna\\ncolocolo\\nanne\\n123456789i\\npoopy12\\ncupcakes\\n#1pimp\\nsusanna\\npretty123\\nlucero\\nbruins\\npassword12345\\napril24\\n4children\\nmitch1\\nlegenda\\ngamecube1\\na666666\\nfabulous1\\nTOPBUTTON\\n36mafia\\n319f4d26e3c536b5dd871bb2c52e3178\\npooh12\\nsamiam\\npontiac1\\nferdinand\\n0000007\\nmmmmmm1\\nmakemoney\\nkacper\\ncabbage\\njune25\\nhello13\\nxxxxxxxxxx\\nwayne\\npsalm23\\nmy.space\\ndarlene1\\nchris10\\nangeline\\nnaruto13\\nLiverpool\\nmckenzie1\\nlayla1\\nghbywtccf\\ntototo\\nchina\\nbugger\\noreo123\\nloveyou12\\nhanna\\n1dragon\\nmikemike\\nboobear1\\n333999\\n251314\\nsummer!\\nrainbow7\\nqwertzuiop\\nfamily7\\n&hearts;\\nsheena1\\nlooser\\nimcool\\ntango1\\nselenagome\\nnokia3310\\nPassword01\\nfuck13\\nbrandon3\\nshiloh1\\nmostwanted\\nalexis123\\npolarbear\\npleasure\\nmoney22\\ncharlie7\\npink1234\\nashley!\\nmail.ru\\naaabbb\\npringles\\nestefania\\nhockey10\\nbuster11\\ncorrado\\ntracy\\nsolution\\njuly14\\njasmine3\\nfootball33\\nbristol\\nboomboom1\\nnicole10\\nbautista\\nmaster2\\nfootball6\\nnigga2\\nmike11\\naugust11\\naaa123456\\n9293709b13\\nvillage\\nsonic123\\nhello22\\nfordf250\\nbacon1\\ntigger11\\nromance1\\nbonjovi1\\nbirdman1\\naardvark\\nlol101\\nlespaul\\nginger2\\nflorence1\\nbigmac1\\nsexygurl1\\ndiscover\\nchinese\\njane\\nhogwarts\\neldorado\\ncoolboy\\n1qaz@wsx\\nnigger2\\nfuckers\\nanthony5\\n959595\\n4444444444\\n753357\\ntinkerbel1\\nmickael\\nhockey7\\na121212\\nmygirls2\\nmarlene1\\nfantastic\\nPasswort\\nsupersonic\\nilovejosh1\\ndani\\ncrackhead1\\nbjk1903\\nsnoopdogg\\nsenior07\\nqueens\\nlibby1\\nillusion\\nbutch1\\nbigben\\nsharpie1\\njulio1\\n1231230\\n0147852369\\nthelma\\nartur\\n74107410\\n12345qaz\\n1232123\\nwhiskers1\\nshinigami\\nfuckmylife\\nalexalex\\n198600\\njackpot\\ngremlin\\ndanielle12\\npurple5\\npanties\\njack1234\\ncooking\\n123456789asd\\n009988\\nrolando\\nhusband\\nbelinda1\\namigas\\n595959\\nrebels\\nmazafaka\\ncachorro\\ntrololo\\ngenius1\\ndesmond1\\nzzzzz\\nvermont\\nsasuke123\\nzzz123\\nspeed1\\nhoneyko\\nmankind\\njohanna1\\nimpossible\\nfabiana\\ndeerhunter\\nchihuahua\\nsneaky1\\ngrandkids\\naikido\\nusher\\nsamurai1\\narchitect\\nwishbone\\nsony\\nliliana1\\nkillers1\\nhelena1\\nboo\\nbam123\\nсветлана\\nyummy\\nsamsam1\\nnatural\\n1mommy\\ntoday1\\ngrandpa\\nassasin\\ntequiero1\\nlove28\\nvanhalen\\nrobinson1\\njoshua11\\nguilherme\\nmoussa\\nlove05\\nhanna1\\ndiamant\\nblessing1\\nseamus\\no\\napril18\\nwilbur\\nmylove2\\nmoney13\\nbogart\\n1962\\nmichael!\\nczz000\\n8PHroWZ624\\nmatthew3\\nfinance\\ndwayne1\\nsamtron\\npicard\\nmoney10\\nbluesky1\\nrosemary1\\npizzas\\nkillme1\\njonjon1\\nlover101\\njesus10\\nfirenze\\nchocolate7\\n20082009\\nyumyum\\nnipper\\nloveless1\\niw14Fi9jwQa\\nhappy7\\n1melissa\\ntaylor13\\nmariela\\nmalachi\\nfuckoff69\\nfootball08\\ncolumbus\\n198\\nweare138\\njuly22\\nhotchick1\\n2lovers\\nx\\noperator\\nlonghorn1\\nharriet\\nmalinka\\ngoodlife\\n132132\\nunderworld\\ntulips\\nqwerty99\\ntricolor\\nfalcons7\\ndanny12\\ncrack1\\nyahoomail\\nfuckyou23\\nfart\\nexodus\\nelena1\\n2011\\nsuperman13\\nfaker1\\nsmokeweed1\\nmelo15\\ngolfing\\nchris14\\nkayleigh1\\nbossy1\\n198500\\nsarajevo\\nsarah12\\nqwerty3\\npatrizia\\nnot4you\\nkathmandu\\niloveyou<3\\ngfhjkm1\\nfullmoon\\ncrimson1\\ntimber1\\nandrea12\\n1111111a\\nlucky11\\ncathy\\nboobie1\\nbitch7\\niloveyou01\\nmedion1\\ncapoeira\\n123123qwe\\nlemon\\nMarina\\nmomanddad\\nfriends4ev\\ncharlie01\\nbigsexy1\\nbear12\\nJordan\\nisaac\\niloveu3\\nskate12\\nsailboat\\nelisa\\ndoodoo\\n828282\\n25800852\\nnigga12\\norion\\nbosco1\\naaaaaaaaa1\\npoop1234\\nminicooper\\njune18\\njessica11\\nharris1\\nfishes\\npromise1\\nmighty\\nmarch18\\nhooker1\\nchocolate3\\naurelien\\njamila\\ngribouille\\ncreation\\nariane\\n4everlove\\n21\\nyellow3\\nshark\\ndutchess\\ncorolla\\nsteven123\\nstarstar\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"notdone.txt\",\"text\":\"\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-651393.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[7,11],[11,19],[16,20],[7,15],[21,26],[14,24],[14,23],[6,15],[9,10]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-240115.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":638690247,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"38.8.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":32669795238,\"moneyMax\":122511732142.5,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1171,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-696741.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,13],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"95.0.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":38130181388.25,\"moneyMax\":142988180205.9375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1317,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-655548.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":1251647030205,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"16.3.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":14328928632.75,\"moneyMax\":53733482372.8125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1093,\"serverGrowth\":69}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-789576.cct\",\"type\":\"Total Ways to Sum\",\"data\":10,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-917575.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"526723060976\",38],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"14.9.6.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":29628820357.5,\"moneyMax\":111108076340.625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":982,\"serverGrowth\":66}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"81.4.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":17894476488.75,\"moneyMax\":67104286832.8125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1103,\"serverGrowth\":77}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"92.9.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":18275239724.25,\"moneyMax\":68532148965.9375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":996,\"serverGrowth\":71}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"55.1.4.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":12646016391,\"moneyMax\":47422561466.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1052,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-279479.cct\",\"type\":\"Array Jumping Game II\",\"data\":[5,1,3,1,3,4,2,5,5],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"98.5.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":16740225343.5,\"moneyMax\":62775845038.125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1009,\"serverGrowth\":96}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"44.3.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":19756788314.25,\"moneyMax\":74087956178.4375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":999,\"serverGrowth\":98}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-159359.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,10],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"15.5.2.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1331746692.75,\"moneyMax\":4994050097.8125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1206,\"serverGrowth\":96}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"0.6.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1475,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"15.4.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":786242722.5,\"moneyMax\":2948410209.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":876,\"serverGrowth\":71}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-303146.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":934826353,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"82.8.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":691311719.25,\"moneyMax\":2592418947.1875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":859,\"serverGrowth\":56}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"52.8.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":473753608.5,\"moneyMax\":1776576031.875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":919,\"serverGrowth\":58}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"25.3.5.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":427755052.5,\"moneyMax\":1604081446.875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":868,\"serverGrowth\":76}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"40.6.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":581261976.75,\"moneyMax\":2179732412.8125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":781,\"serverGrowth\":65}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"80.2.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":723088494,\"moneyMax\":2711581852.5,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":896,\"serverGrowth\":91}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-17124.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())a)))(a))(a()((a\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"36.3.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":882944430,\"moneyMax\":3311041612.5,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":805,\"serverGrowth\":88}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"11.4.6.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":576507323.25,\"moneyMax\":2161902462.1875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":858,\"serverGrowth\":72}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"71.6.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":476342909.25,\"moneyMax\":1786285909.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":823,\"serverGrowth\":82}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-189815.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"2825116673\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-331006.cct\",\"type\":\"Total Ways to Sum\",\"data\":100,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"39.0.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":657875308.5,\"moneyMax\":2467032406.875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":863,\"serverGrowth\":77}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"8.7.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":570941013,\"moneyMax\":2141028798.75,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":849,\"serverGrowth\":71}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-384616.cct\",\"type\":\"Total Ways to Sum\",\"data\":23,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"87.6.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":890582853.75,\"moneyMax\":3339685701.5625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":884,\"serverGrowth\":58}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"88.2.7.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":737551791,\"moneyMax\":2765819216.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":930,\"serverGrowth\":70}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"50.6.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":749085327.75,\"moneyMax\":2809069979.0625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":779,\"serverGrowth\":72}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"63.9.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":561320107.5,\"moneyMax\":2104950403.125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":836,\"serverGrowth\":74}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"58.8.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":669260517,\"moneyMax\":2509726938.75,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":775,\"serverGrowth\":70}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-837035.cct\",\"type\":\"Array Jumping Game\",\"data\":[6,10,8,4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"64.9.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":983372134.5,\"moneyMax\":3687645504.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":839,\"serverGrowth\":60}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-872729.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()))((((()a\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"12.2.6.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1184618175.75,\"moneyMax\":4442318159.0625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":757,\"serverGrowth\":83}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"17.6.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":897960928.5,\"moneyMax\":3367353481.875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":825,\"serverGrowth\":69}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"77.8.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":992927278.5,\"moneyMax\":3723477294.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":834,\"serverGrowth\":78}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"63.9.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":779775816.75,\"moneyMax\":2924159312.8125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":792,\"serverGrowth\":73}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"14.5.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":538337224.5,\"moneyMax\":2018764591.875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":657,\"serverGrowth\":55}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"71.8.6.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":381239904.75,\"moneyMax\":1429649642.8125,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":489,\"serverGrowth\":59}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"34.7.3.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":474023045.25,\"moneyMax\":1777586419.6875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":504,\"serverGrowth\":56}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-981359.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[22,31],[11,20],[19,21],[20,26],[17,26],[11,14],[9,19],[10,11],[11,20],[9,16],[6,7],[23,33],[8,10],[15,22],[21,25],[13,14],[20,23],[9,12]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"79.6.2.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":159066546,\"moneyMax\":596499547.5,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":416,\"serverGrowth\":43}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-93047.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()a(()())a()(\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-731270.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[8,[[1,3],[1,2],[1,5],[0,5],[4,6],[4,5],[1,7],[2,4],[1,6]]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-418366.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[18,18,40,15,30,27,15,46,16,33],[5,31,6,22,22,14,41,16,30,14],[13,18,28,37,8,17,2,36,23,45],[41,50,38,33,22,15,13,18,47,9],[31,43,25,45,40,1,6,21,21,15],[27,40,1,5,18,47,7,43,49,49],[31,13,8,48,36,28,25,36,41,44],[10,34,47,4,24,6,49,45,12,18],[35,46,47,14,20,48,38,10,22,6],[17,42,19,49,20,36,26,48,46,5],[16,11,21,17,21,36,7,35,22,1],[45,5,14,34,49,20,38,5,35,11],[50,16,9,23,48,3,50,7,21,47]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"50.0.6.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":176739911.25,\"moneyMax\":662774667.1875,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":425,\"serverGrowth\":45}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"18.6.3.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"computek\",\"lexo-corp\",\"rho-construction\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":762934317.75,\"moneyMax\":2861003691.5625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":731,\"serverGrowth\":78}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"33.3.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":200399532.75,\"moneyMax\":751498247.8125,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":425,\"serverGrowth\":50}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"37.8.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":321272235.75,\"moneyMax\":1204770884.0625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":619,\"serverGrowth\":64}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"39.0.9.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":340572567.75,\"moneyMax\":1277147129.0625,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":420,\"serverGrowth\":55}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"60.1.9.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":143327341.5,\"moneyMax\":537477530.625,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":296,\"serverGrowth\":48}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-751489.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[109,17,112,63,44,83,53,178,15,51,51,173,168,31,34,69,178,90,179,54,137,115,74,57,65,178,186,128,132,82,101,56,16,55,185,120,166,181,15,94,76,55,80,69],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"59.7.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":173514602.25,\"moneyMax\":650679758.4375,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":322,\"serverGrowth\":53}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"98.7.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":206250000,\"moneyMax\":773437500,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":415,\"serverGrowth\":62}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"87.2.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":57906074.25,\"moneyMax\":217147778.4375,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":268,\"serverGrowth\":36}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-51598.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[65,137,100,115,56,44,192,99,96,132,74,46,59,13,145,90,143,99,116,146,2],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-974913.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"74814\",62],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-332754.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[160,139,52,95,22,3,96,170,189,17,196,8,186,149,154,53],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"76.8.1.0\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":52500,\"moneyMax\":196875,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"69.9.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":1500000,\"moneyMax\":5625000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"94.2.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":1725000,\"moneyMax\":6468750,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"77.0.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1875000,\"moneyMax\":7031250,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-215165.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[66,139,158,163,196,129,26,68,104,69,197,99,14,159,43,105,103,129,186,178,49],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"91.3.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"sigma-cosmetics\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5625000,\"moneyMax\":21093750,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"1.6.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2062500,\"moneyMax\":7734375,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-111979.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[185,78,114,135,29,111,116,89,87,126,117,70,78]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"50.3.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":3750000,\"moneyMax\":14062500,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-956748.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()()()\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"30.6.8.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":33750000,\"moneyMax\":126562500,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"9.3.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2250000,\"moneyMax\":8437500,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"35.4.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":11250000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"76.7.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":18000000,\"moneyMax\":67500000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"81.9.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"joesguns\",\"neo-net\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":7500000,\"moneyMax\":28125000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"99.6.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\",\"computek\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":33,\"hackDifficulty\":33,\"minDifficulty\":11,\"moneyAvailable\":49390637.25,\"moneyMax\":185214889.6875,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":211,\"serverGrowth\":39}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-974538.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[159,75,14,187,2,64,138,136,35,77,80,133,68,126,70,157,94,85,75,154,39,21,17,27,128,39,121,147,44,67,68,164,109,171,37,34,82,147,60,166,84,91,198,123,79,196,154,20,183,137],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"62.5.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":41355075.75,\"moneyMax\":155081534.0625,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":251,\"serverGrowth\":33}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-67658.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[44,181,67,93,33,68,49,147,60,197,120,172,3,103,162,126,151,90,181,123,131,62,8,119,26,189,122,59,40,122,89]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"48.4.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":15000000,\"moneyMax\":56250000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"5.5.4.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":187500000,\"moneyMax\":703125000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":477,\"serverGrowth\":28}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-101346.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"DEBUG LOGIC FLASH ENTER INBOX\",19],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"10.5.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":675000000,\"moneyMax\":2531250000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1001,\"serverGrowth\":56}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"85.0.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":337500000,\"moneyMax\":1265625000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":770,\"serverGrowth\":52}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"70.4.8.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":549,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-390758.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,2,2,3,7,2,3,0,2,4,2,3,7,2,2,1,4,4,2],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"21.1.4.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":358,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"88.9.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":211,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"77.3.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":529,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-322324.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[4,12],[3,4],[17,26],[15,23],[12,20],[18,22],[22,25],[10,20],[24,34],[9,19],[21,26],[18,27],[2,6],[19,20],[3,5],[21,24]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"77.5.8.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":51,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"80.7.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\",\"w0r1d_d43m0n\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"98.1.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":9000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"57.0.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0.5615,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0.5417,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{\"dir\":\"ls -l\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#E3B54A\",\"primary\":\"#CAA243\",\"primarydark\":\"#7E6937\",\"successlight\":\"#82FF82\",\"success\":\"#6FDA6F\",\"successdark\":\"#64C364\",\"errorlight\":\"#FD5555\",\"error\":\"#D84A4A\",\"errordark\":\"#AC3939\",\"secondarylight\":\"#D8D0B8\",\"secondary\":\"#B1AA95\",\"secondarydark\":\"#736E5E\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#000000\",\"white\":\"#fff\",\"black\":\"#070300\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000000\",\"backgroundsecondary\":\"#0E0E10\",\"button\":\"#222222\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-136,\"y\":222,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}},\"RemoteFileApiPort\":0}","VersionSave":"25","AllGangsSave":"","LastExportBonus":"1663548205132","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":320493,\"fragments\":[]}}"}}